{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.api_lib_project_name,
  		description : project.attributes.api_lib_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'api-tools.js'
		%}
'use script';

class ApiTool {
	#apiBaseUrl = null; 
	#accessToken = null;
	#refreshToken = null;
	#tokensSerializeFunction = null;

	_loadTokens() {
		const tokens = this.#tokensSerializeFunction('load');
		if (tokens === undefined) 
			throw new Error('[tokensSerializeFunction] did not return a result');
		if (tokens === null || typeof(tokens) !== 'object')
			throw new Error('[tokensSerializeFunction] did not return an array');
		if (tokens.constructor.name != 'Array')
			throw new Error('[tokensSerializeFunction] did not return an array');

		const refreshToken = tokens[0];
		if (refreshToken === undefined)
			throw new Error('[tokensSerializeFunction] did not return a refresh token');
		if (refreshToken !== null && typeof(refreshToken) !== 'string')
			throw new Error('[tokensSerializeFunction] did not return a valid refresh token');
		this.#accessToken = refreshToken;

		const accessToken = tokens[1];
		if (accessToken === undefined)
			throw new Error('[tokensSerializeFunction] did not return a access token');
		if (accessToken !== null && typeof(accessToken) !== 'string')
			throw new Error('[tokensSerializeFunction] did not return a valid access token');
		this.#accessToken = accessToken;

	}

	initialize (config, tokensSerializeFunction) {
		if ( this.#apiBaseUrl !== null)
			return; // FIXME do not generate exception since it is called twice with React


		if (tokensSerializeFunction === undefined)
			throw new Error('[tokensSerializeFunction] argument is not defined');
		if (typeof(tokensSerializeFunction) !== 'function')
			throw new Error('[tokensSerializeFunction] argument is not a function');
		this.#tokensSerializeFunction  = tokensSerializeFunction;
		this._loadTokens();

		if (config === undefined)
			throw new Error('[config] argument is missing');
		if (config.backend === undefined)
			throw new Error('Section [backend] is not defined in config"');
		if (config.backend.url === undefined)
			throw new Error('Parameter [url] is not defined [backend] section');
		this.#apiBaseUrl = config.backend.url
		console.log('API backend url', this.#apiBaseUrl )
		if (config.backend.url === undefined)
			throw new Error('Parameter [url] is not defined [backend] section');
	}

	setTokens(accessToken, refreshToken) {
		this.#accessToken = accessToken;
		this.#refreshToken = refreshToken;
		this.#tokensSerializeFunction('save', refreshToken, accessToken);
	}

	async request(route, httpMethod, requestBody = null, params = null){
		if ( this.#apiBaseUrl === null)
			throw new Error('Apitools is not initialized');
		const apiUrl = new URL(`${this.#apiBaseUrl}/${route}`);
		console.log(`API call ${apiUrl}`);
		if (params !== null) {
			if (params.filters !== undefined) {
				for (const filter of Object.keys(params.filters)) 
					apiUrl.searchParams.append(filter, params.filters[filter]);
			}
			if (params.resultsPerPage !== undefined)
				apiUrl.searchParams.append('resultsPerPage', params.resultsPerPage);
		}
		const httpHeaders = {
			'Accept': 'application/json',
			'Content-Type': 'application/json'
		}
		if (this.#accessToken !== null)
			httpHeaders['x-access-token'] = this.#accessToken;
		const requestParams = {
			method : httpMethod,
			headers: httpHeaders
		}
		if (requestBody !== null)
			requestParams.body = JSON.stringify(requestBody);

		// first attempt
		let result = await fetch(apiUrl, requestParams);
		if (result.status !== 200) 
			throw new Error(`HTTP response status is ${result.status} (${result.statusText})`);
		let json = await result.json();
		if (json === null)
			throw new Error('JSON response is null');
		if (json.ok === undefined)
			throw new Error('OK status not found in JSON response');
		if (typeof(json.ok) !== 'boolean')
			throw new Error('OK status is not a boolean in JSON response');

		if (json.ok === false && json.error === 'Expired token' ) {
			console.log('Refreshing access token...');
			const refreshApiUrl = new URL(`${this.#apiBaseUrl}/auth/refresh`);
			const refreshHttpHeaders = {
				'Accept': 'application/json',
				'Content-Type': 'application/json'
			}
			const refreshRequestBody = {
				token: this.#refreshToken
			};
			const refreshParams = {
				method: 'POST',
				headers: refreshHttpHeaders,
				body: JSON.stringify(refreshRequestBody)
			};
			result = await fetch(refreshApiUrl, refreshParams);
			if (result.status !== 200) 
				throw new Error(`HTTP response status is ${result.status} (${result.statusText})`);
			json = await result.json();
			if (json === null)
				throw new Error('JSON response is null');
			if (json.ok === undefined)
				throw new Error('OK status not found in JSON response');
			if (typeof(json.ok) !== 'boolean')
				throw new Error('OK status is not a boolean in JSON response');

			this.#accessToken = json.data['access-token'];
			this.#refreshToken = json.data['refresh-token'];

			httpHeaders['x-access-token'] =json.data['access-token']; 
			/* TODO update request
			request.session.userId = json.data.userId;
			//request.session.companyId = json.data.companyId;
			*/

			// second attempt
			result = await fetch(apiUrl, requestParams);
			if (result.status !== 200) 
				throw new Error(`HTTP response status is ${result.status} (${result.statusText})`);
			json = await result.json();
			if (json === null)
				throw new Error('JSON response is null');
			if (json.ok === undefined)
				throw new Error('OK status not found in JSON response');
			if (typeof(json.ok) !== 'boolean')
				throw new Error('OK status is not a boolean in JSON response');
		}

		if (! json.ok )
			throw new Error(json.error);
		if (json.data === undefined)
			throw new Error('data not found in JSON response');
		return json.data;
	}
}

class ApiToolsSingleton {
	static instance = null;

	constructor() {
		throw new Error('Can not instanciate singleton object!');
	}

	static getInstance() {
		if (! ApiToolsSingleton.instance)
			ApiToolsSingleton.instance = new ApiTool();
		return ApiToolsSingleton.instance;
	}
}

export default ApiToolsSingleton
