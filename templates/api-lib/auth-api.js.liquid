{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.api_lib_project_name,
  		description : project.attributes.api_lib_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-api.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
	assign authIdentProp = authObject.properties | where: 'name', project.attributes.auth_ident_property | first
	assign authPasswordProp = authObject.properties | where: 'name', project.attributes.auth_password_property | first
	assign authCodeProp = authObject.properties | where: 'name', project.attributes.auth_code_property | first
	assign authExtraField = project.attributes.auth_extra_field
	assign authAccountFields = project.attributes.auth_account_fields | split: ','
%}
'use script';
import ApiToolsSingleton from './api-tools';
const apiTools = ApiToolsSingleton.getInstance();
const apiVersion= 'v1';

const login = async function(email, password) {
	if (email === undefined)
		throw new Error("[email] argument is missing");
	if (password === undefined)
		throw new Error("[password] argument is missing");
	const url = `${apiVersion}/auth/login`;

	try {
		// TODO control {{authIdentProp.name|camelCase}} and {{authPasswordProp.name|camelCase}} values

		const requestBody = {
			{{authIdentProp.name|camelCase}}: {{authIdentProp.name|camelCase}}, 
			{{authPasswordProp.name|camelCase}}: {{authPasswordProp.name|camelCase}}
		};
		const result = await apiTools.request(url, 'POST',  requestBody, null, false);

		const {{authObject.name|camelCase}}Id = result['{{authObject.name|camelCase}}Id'];;
		if ({{authObject.name|camelCase}}Id === undefined)
			throw new Error('{{authObject.name|camelCase}}Id not found in HTTP response');

		{% for accountField in authAccountFields %}
		const {{accountField|camelCase}} = result['{{accountField|camelCase}}'];;
		if ({{accountField|camelCase}} === undefined)
			throw new Error('{{accountField}} not found in HTTP response');
		{% endfor %}

		const refreshToken = result['refresh-token'];;
		if (refreshToken === undefined)
			throw new Error('refresh-token not found in HTTP response');

		const accessToken = result['access-token'];;
		if (accessToken === undefined)
			throw new Error('access-token not found in HTTP response');

		const account = { {{authObject.name|camelCase}}Id, {{authIdentProp.name|camelCase}},
			{%- for accountField in authAccountFields -%}
			{{accountField}},
			{%- endfor -%}
		}
		apiTools.setAccountAndTokens(account, accessToken, refreshToken)

		return { ok: true, ...account };
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

const logout = async function() {
	const url = `${apiVersion}/auth/logout`;
	try {
		const result = await apiTools.request(url, 'POST',  
			null,  // requestBody
			null,  // params
			false, // do not send accessToken
			true); // send refresh token in request body
		apiTools.setAccountAndTokens(null, null, null)
		return {ok: true};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

const register = async function(email, password
{%- for accountField in authAccountFields -%}
, {{accountField}}
{%- endfor -%}
) {
	if (email === undefined)
		throw new Error("[email] argument is missing");
	if (password === undefined)
		throw new Error("[password] argument is missing");
	{% for accountField in authAccountFields -%}
	if ({{accountField}} === undefined)
		throw new Error("[{{accountField}}] argument is missing");
	{% endfor -%}
	const url = `${apiVersion}/auth/register`;
	try {
		// TODO control {{authIdentProp.name|camelCase}} and {{authPasswordProp.name|camelCase}} values are not empty
		const requestBody = {
			{{authIdentProp.name|camelCase}}, 
			{{authPasswordProp.name|camelCase}},
			{% for accountField in authAccountFields -%}
			{{accountField}},
			{% endfor -%}
			}
		const result = await apiTools.request(url, 'POST',  requestBody, null, false);
		const {{authObject.name|camelCase}}Id = result['{{authObject.name|camelCase}}Id'];;
		if ({{authObject.name|camelCase}}Id === undefined)
			throw new Error('{{authObject.name|camelCase}}Id not found in HTTP response');
		const refreshToken = result['refresh-token'];;
		if (refreshToken === undefined)
			throw new Error('refresh-token not found in HTTP response');
		const accessToken = result['access-token'];;
		if (accessToken === undefined)
			throw new Error('access-token not found in HTTP response');
		const account = { {{authObject.name|camelCase}}Id, {{authIdentProp.name|camelCase}},
			{%- for accountField in authAccountFields -%}
			{{accountField}},
			{%- endfor -%}
		}
		apiTools.setAccountAndTokens(account, accessToken, refreshToken)

		return {
			ok: true, 
			{{authObject.name|camelCase}}Id: {{authObject.name|camelCase}}Id
		};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

const validateRegistration = async function(validationCode) {
	if (validationCode === undefined)
		throw new Error("[validationCode] argument is missing");
	const url = `${apiVersion}/auth/validateRegistration`;
	try {
		// TODO control {{authCodeProp.name|camelCase}} value is not empty
		const requestBody = {
			{{authCodeProp.name|camelCase}}: {{authCodeProp.name|camelCase}}
		};
		const result = await apiTools.request(url, 'POST',  requestBody, null, true);
		return {ok: true};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

const getContext = async function() {
	const url = `${apiVersion}/auth/get-context`;
	try {
		const result = await apiTools.request(url, 'GET', null, null, false);
		if (result.context === undefined)
			throw new Error(`Can't find context in API response`);
		return { ok: true, context: result.context };
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}


const authApi = {
	login: login,
	logout: logout,
	register: register,
	validateRegistration : validateRegistration,
	getContext: getContext
}
export default authApi;
