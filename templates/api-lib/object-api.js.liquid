{%- assign filename = object.name | kebabCase | append: "-api.js" -%}
{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.api_lib_project_name,
  		description : project.attributes.api_lib_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : filename 
		%}
'use script';
const assert = require('assert');
const ApiToolSingleton = require('./api-tools.js');
const apiTool = ApiToolSingleton.getInstance();
const ModelSingleton = require('./model.js');
const model  = ModelSingleton.getInstance();

exports.get{{object.name | pascalCase}}List = async function (filters, params) {
	assert(filters !== undefined);
	assert(params !== undefined);
	const url = '{{object.name | kebabCase}}/list';
	/* TODO cleanup
	for (const filter of Object.keys(filters)) 
		url.searchParams.append(filter, filters[filter]);
	if (params.resultsPerPage !== undefined)
		url.searchParams.append('resultsPerPage', params.resultsPerPage);
		*/
	params.filters = filters;
	try {
		const result = await apiTool.request(url, 'GET', null, params);
		const {{object.name | camelCase}}List = result.{{object.name | camelCase}}List;
		if ({{object.name | camelCase}}List === undefined)
			throw new Error('{{object.name | pascalCase}} list not found is HTTP response');
		return {ok: true, {{object.name | camelCase}}List: {{object.name | camelCase}}List};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

exports.get{{object.name | pascalCase}}Details = async function (id{{object.name | pascalCase}}, params) {
	assert(id{{object.name | pascalCase}} !== undefined);
	assert(params !== undefined);
	if (isNaN(id{{object.name | pascalCase}}))
		throw new Error('Argument <id{{object.name | pascalCase}}> is not a number');
	const url = `{{object.name | kebabCase}}/${id{{object.name | pascalCase}}}`;
	try {
		const result = await apiTool.request(url, 'GET', null, null);
		const {{object.name | camelCase}} = result.{{object.name | camelCase}};
		if ({{object.name | camelCase}} === undefined)
			throw new Error('{{object.name | pascalCase}} not found is HTTP response');
		return {ok: true, {{object.name | camelCase}}: {{object.name | camelCase}}};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

