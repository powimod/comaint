{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.mpa_frontend_project_name,
  		description : project.attributes.mpa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'main.jsx'
		%}
import React, { Suspense } from "react"
import ReactDOM from 'react-dom/client'
import { createBrowserRouter, createRoutesFromElements, Route, RouterProvider, useLoaderData, useParams } from "react-router-dom";

import createRouter from './router'
import ApiToolsSingleton from './api/api-tools'
import AccountContext from './AccountContext'

import './i18n'
import './scss/main.scss'

import config from '../config.json'

function tokensSerializeFunction(mode, refreshToken, accessToken) {
	const refreshTokenKey = 'refresh-token';
	const accessTokenKey = 'access-token';
	switch (mode) {
		case 'save':
			if (refreshToken)
				localStorage.setItem(refreshTokenKey, refreshToken);
			else
				localStorage.removeItem(refreshTokenKey, refreshToken);
			if (accessToken)
				localStorage.setItem(accessTokenKey, accessToken);
			else
				localStorage.removeItem(accessTokenKey, accessToken);
			break;
		case 'load':
			refreshToken = localStorage.getItem(refreshTokenKey);
			accessToken = localStorage.getItem(accessTokenKey);
			break;

		case 'clear':
			localStorage.removeItem(refreshTokenKey, refreshToken);
			localStorage.removeItem(accessTokenKey, accessToken);
			break;
	}
	return [refreshToken, accessToken];
}

function main() {

	// initialize API backend url from config
	try {
		ApiToolsSingleton.getInstance().initialize(config, tokensSerializeFunction);
	}
	catch (error) {
		console.error("Error while loading config.js :", error);
		return false;
	}

	ReactDOM.createRoot(document.getElementById('root')).render(
		<React.StrictMode>
			<Suspense fallback={<div>Loading...</div>}>
				<AccountContext>
					<RouterProvider router={createRouter()} />
				</AccountContext>
			</Suspense>
		</React.StrictMode>
	)
}

main();
