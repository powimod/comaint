{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.spa_frontend_project_name,
  		description : project.attributes.spa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'AccountContext.jsx'
		%}
import React, {createContext, useState, useEffect} from 'react'

const userIdStorageKey = 'userId';
const accountInitialValue = {
	userId: null
}

const AccountContext = createContext(accountInitialValue);

const loadInitialAccountContext = () => {
	let userId = localStorage.getItem(userIdStorageKey);
	if (userId === null)
		return null
	userId = parseInt(userId)
	if (isNaN(userId))
		return null
	return { userId }
}

const AccountProvider = ( ({children}) => {
        const [account, setAccount] = useState(loadInitialAccountContext)

	useEffect( () => {
		saveAccountContext()
	}, [account]);

	const saveAccountContext = () => {
		if (account)
			localStorage.setItem(userIdStorageKey, account.userId);
		else
			localStorage.removeItem(userIdStorageKey);
	}

        const changeAccount = (account) => {
		if (account === undefined)
			throw new Error('Argument [account] is missing');
		if (account !== null && account.userId === undefined)
			throw new Error('Property "userId" is not defined');
                setAccount(account)
        }
        return(
		<AccountContext.Provider value={ { account, changeAccount } }>
                        {children}
                </AccountContext.Provider>
        );
});

export {AccountContext}
export default AccountProvider
