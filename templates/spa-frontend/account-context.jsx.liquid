{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.spa_frontend_project_name,
  		description : project.attributes.spa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'AccountContext.jsx'
		%}
import React, {createContext, useState, useEffect} from 'react'

import ApiToolsSingleton from './api/api-tools'
import authApi from './api/auth-api.js'
import config from '../config.json'

const accountIdStorageKey = 'accountId';
const refreshTokenKey = 'refresh-token';
const accessTokenKey = 'access-token';


const AccountContext = createContext(null);


const AccountProvider = ( ({children}) => {
	const [accountId, setAccountId] = useState(null)
        const [account, setAccount] = useState(null)
	const [apiInitError, setApiInitError] = useState(false);


	const asyncLoadContext = async () => {
		console.log("dOm ================ load context accountId = ", accountId)
		const result = await authApi.getContext()
		console.log(result)
	}

	useEffect( () => {
		if (accountId === undefined)
			return;
		if (accountId === null) {
			if (account !== null)
				setAccount(null)
			return;
		}
		asyncLoadContext()
	}, [accountId]);


	useEffect( () => {
		// initialize API backend url from config
		try {
			ApiToolsSingleton.getInstance().initialize(config, accountSerializeFunction);
		}
		catch (error) {
			console.error("Error while loading config.js :", error.message);
			setApiInitError(true);
		}
	}, []);

        return(
		// AccountContext does not export a function to change account value 
		// because it's changed internaly
		<AccountContext.Provider value={ { account } }>
                        { apiInitError ? <div>Loading error</div> : children}
                </AccountContext.Provider>
        );

	function accountSerializeFunction(mode, accountId, refreshToken, accessToken) {
		if (mode === undefined)
			throw new Error('Missing mode parameter in accountSerializeFunction');
		if (mode === 'save' && ( accountId === undefined || refreshToken === undefined || accessToken === undefined) )
			throw new Error('Missing parameters in accountSerializeFunction');
		console.log("Account serialize - accountId", accountId)
		if (accountId !== undefined && accountId !== null && isNaN(accountId)) 
			throw new Error('Invalid accountId parameter')
		console.log("Account serialize - mode", mode)

		switch (mode) {
			case 'save':
				if (accountId)
					localStorage.setItem(accountIdStorageKey, accountId);
				else
					localStorage.removeItem(accountIdStorageKey);

				if (refreshToken)
					localStorage.setItem(refreshTokenKey, refreshToken);
				else
					localStorage.removeItem(refreshTokenKey);

				if (accessToken)
					localStorage.setItem(accessTokenKey, accessToken);
				else
					localStorage.removeItem(accessTokenKey);

				if (newAccount)
					localStorage.setItem(accountKey, JSON.stringify(newAccount));
				else
					localStorage.removeItem(accountKey);
				break;
			case 'load':
				accountId = localStorage.getItem(accountIdStorageKey);
				if (accountId != null)
					accountId = parseInt(accountId)
				console.log("Account serialize - loaded userID =", accountId)
				refreshToken = localStorage.getItem(refreshTokenKey);
				accessToken = localStorage.getItem(accessTokenKey);
				break;

			case 'clear':
				localStorage.removeItem(accountIdStorageKey);
				localStorage.removeItem(refreshTokenKey);
				localStorage.removeItem(accessTokenKey);
				break;
		}
                setAccountId(accountId)
		return [ accountId , refreshToken, accessToken ]
	}
});

export {AccountContext}
export default AccountProvider
