{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.spa_frontend_project_name,
  		description : project.attributes.spa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'AccountContext.jsx'
		%}
import React, {createContext, useState, useEffect} from 'react'

import ApiToolsSingleton from './api/api-tools'
import config from '../config.json'

const userIdStorageKey = 'userId';
const accountInitialValue = {
	userId: null
}

const AccountContext = createContext(accountInitialValue);

const loadInitialAccountContext = () => {
	let userId = localStorage.getItem(userIdStorageKey);
	if (userId === null)
		return null
	userId = parseInt(userId)
	if (isNaN(userId))
		return null
	return { userId }
}

const AccountProvider = ( ({children}) => {
        const [account, setAccount] = useState(loadInitialAccountContext)
	const [apiInitError, setApiInitError] = useState(false);

	useEffect( () => {
		saveAccountContext()
	}, [account]);

	useEffect( () => {
		// initialize API backend url from config
		try {
			ApiToolsSingleton.getInstance().initialize(config, accountSerializeFunction);
		}
		catch (error) {
			console.error("Error while loading config.js :", error.message);
			setApiInitError(true);
		}
	}, []);

	const saveAccountContext = () => {
		if (account)
			localStorage.setItem(userIdStorageKey, account.userId);
		else
			localStorage.removeItem(userIdStorageKey);
	}

        return(
		// AccountContext does not export a function to change account value 
		// because it's changed internaly
		<AccountContext.Provider value={ { account } }>
                        { apiInitError ? <div>Loading error</div> : children}
                </AccountContext.Provider>
        );

	function accountSerializeFunction(mode, newAccount, refreshToken, accessToken) {
		if (mode === undefined)
			throw new Error('Missing mode parameter in accountSerializeFunction');
		if (mode === 'save' && ( newAccount === undefined || refreshToken === undefined || accessToken === undefined) )
			throw new Error('Missing parameters in accountSerializeFunction');

		const refreshTokenKey = 'refresh-token';
		const accessTokenKey = 'access-token';
		const accountKey = 'account';

		switch (mode) {
			case 'save':
				if (refreshToken)
					localStorage.setItem(refreshTokenKey, refreshToken);
				else
					localStorage.removeItem(refreshTokenKey);
				if (accessToken)
					localStorage.setItem(accessTokenKey, accessToken);
				else
					localStorage.removeItem(accessTokenKey);
				if (newAccount)
					localStorage.setItem(accountKey, JSON.stringify(newAccount));
				else
					localStorage.removeItem(accountKey);
				break;
			case 'load':
				refreshToken = localStorage.getItem(refreshTokenKey);
				accessToken = localStorage.getItem(accessTokenKey);
				try {
					newAccount = JSON.parse(localStorage.getItem(accountKey));
				}
				catch (error) {
					newAccount = null;
				}
				break;

			case 'clear':
				localStorage.removeItem(refreshTokenKey);
				localStorage.removeItem(accessTokenKey);
				localStorage.removeItem(accountKey);
				break;
		}
                setAccount(newAccount)
		return [newAccount, refreshToken, accessToken]
	}
});

export {AccountContext}
export default AccountProvider
