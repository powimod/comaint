{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.spa_frontend_project_name,
  		description : project.attributes.spa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'components/ContenttLoader.jsx'
		%}
import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Link } from 'react-router-dom'
import Async, { useAsync } from "react-async"
import i18n from "i18next";

const ContentLoader = ({source}) => {
	const { t } = useTranslation()

	const [ lang, setLang ] = useState(null)

	useEffect(() => {
		setLang(i18n.language)
	}, []);


	const onLanguageChanged = (lang) => {
		console.log("ContentLoader Language changed : ", lang);
		setLang(lang);
	}

	useEffect( () => {
		i18n.on('languageChanged', onLanguageChanged);
		return () => {
			i18n.off('languageChanged', onLanguageChanged);
		}
		
	}, [onLanguageChanged]);


	const render = (data) => {
		return new Promise( (resolve, reject) => {
			const components = []
			let list = []
			let paragraph = []
			let n = 0;
			for (let line of data.split('\n')) {
				line = line.trim()

				if ( paragraph.length > 0  && line.length > 0 ) {
					components.push(<p key={n++}>{paragraph.join('\n')}</p>)
					paragraph = []
				}
				if ( list.length > 0  && ! line.startsWith('-') ) {
					components.push( <ul key={n++}> { list.map( (line,i) => <li key={i}>{line}</li> ) } </ul>)
					list = []
				}

				if (line.startsWith('###')) {
					components.push(<h3 key={n++}>{line.substr(3).trim()}</h3>)
					continue
				}
				if (line.startsWith('##')) {
					components.push(<h2 key={n++}>{line.substr(2).trim()}</h2>)
					continue
				}
				if (line.startsWith('#')) {
					components.push(<h1 key={n++}>{line.substr(1).trim()}</h1>)
					continue
				}

				if (line.startsWith('-')) {
					list.push(line.substr(1).trim())
					continue
				}

				paragraph.push(line)

			}
			resolve(<>{components}</>)
		});
	}

	const loadUrl = async ({ url }, {signal}) => {
		let response = await fetch(url, { signal })
		// When the resource does not exist, Vite always returns status=200 and response content is index.html !
		// This does not happen when running on a real HTTP server
		if (! response.ok)
			throw new Error(`Ressource "${url}" not found`) // TODO translation
		let data  = await response.text()
		return render(data);
	}


	const sourceUrl = `content/${lang}/${source}`

	return (
		lang == null ?
			<div>Language not set</div>
		: 
			<Async promiseFn={loadUrl} url={sourceUrl}>
				{({ data, error, isPending }) => {
					if (isPending)
						return "Loading..." // TODO translation
					if (error)
						return "Something went wrong: " + error.message // TODO translation
					if (data) 
						return data
					return null
				}}
			</Async>
	)
}

export default ContentLoader
