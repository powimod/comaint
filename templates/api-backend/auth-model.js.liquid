{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-model.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
	assign authTableName  = authObject.attributes.table_name
	assign authIdentProp = authObject.properties | where: 'name', project.attributes.auth_ident_property | first
	assign authPasswordProp = authObject.properties | where: 'name', project.attributes.auth_password_property | first
	assign authCodeProp = authObject.properties | where: 'name', project.attributes.auth_code_property | first
	assign authLockProp = authObject.properties | where: 'name', project.attributes.auth_lock_property | first
	assign authExtraField = project.attributes.auth_extra_field
	assign authAccountFields = project.attributes.auth_account_fields | split: ','
%}
'use strict';
const assert = require('assert');
const jwt = require('jsonwebtoken');
const util = require('../util.js');

class AuthModel {
	static #model = null;
	static #config = null;
	static #secret = null;

	static initialize = (config) => {
		assert(this.#model === null);
		assert(config !== undefined);
		this.#config = config;
		this.#secret = config.security.tokenSecret;
		assert(this.#secret !== undefined);

		const ModelSingleton = require('./model.js');
		this.#model = ModelSingleton.getInstance();
	}

	static generateValidationCode() {
		const minimum = {{authCodeProp.minimum}};
		const maximum = {{authCodeProp.maximum}};
		return parseInt(Math.random() * (maximum - minimum) + minimum);
	}

	static async sendValidationCode(code, email, i18n_t) {
		const subject = i18n_t('register.mail_title')
		const textBody = i18n_t('register.mail_body', { 'code' : code })
		const htmlBody = i18n_t('register.mail_body', { 'code' : `<b>${code}</b>code` })
		return await util.sendMail(
				email,
				subject,
				textBody,
				htmlBody,
				this.#config.mail
		); 
	}

	static async register({{authIdentProp.name}}, {{authPasswordProp.name}}, 
		{%- for accountField in authAccountFields -%}
		{{accountField|camelCase}}, 
		{%- endfor -%}
		{{authCodeProp.name}}, i18n_t) {
		assert({{authIdentProp.name}} !== undefined);
		assert({{authPasswordProp.name}} !== undefined);
		assert({{authCodeProp.name}} !== undefined);
		assert(this.#model !== null);

		// check an account with same {{authIdentProp.name}} does not already exist
		const db = this.#model.db;
		let sql = 'SELECT {{authIdentProp.name|snakeCase}} FROM {{authTableName}} WHERE {{authIdentProp.name}} = ?';
		let result = await db.query(sql, [ {{authIdentProp.name}} ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length > 0) 
			throw new Error(i18n_t('register.account_already_exists'));

		// make a hash of the password
		assert(this.#config.security.hashSalt !== undefined);
		const saltRounds = this.#config.security.hashSalt;
		const bcrypt = require('bcrypt');
		const {{authPasswordProp.name}}Hash = await bcrypt.hash({{authPasswordProp.name}}, saltRounds)

		const sqlRequest = `
			INSERT INTO {{authTableName}}
				({{authIdentProp.name|snakeCase}}, {{authPasswordProp.name|snakeCase}},{%echo ' '%}
			{%- for accountField in authAccountFields -%}
			{{accountField|camelCase}},{%echo ' '%} 
			{%- endfor -%}
			{{authCodeProp.name|snakeCase}}, {{authLockProp.name|snakeCase}})
			VALUES (?, ?,
			{%- for accountField in authAccountFields -%}{%echo ' '%}?, {%- endfor -%}
			{%echo ' '%}?, ?);`;
		const sqlParams = [
			{{authIdentProp.name}},
			{{authPasswordProp.name}}Hash,
			{%- for accountField in authAccountFields %}
			{{accountField|camelCase}},
			{%- endfor %}
			{{authCodeProp.name}},
			true // account locked
		];
		result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);

		return {
			{{authObject.name|camelCase}}Id : result.insertId
		}
	}

	static async validateRegistration({{authObject.name|camelCase}}Id, {{authCodeProp.name}}, i18n_t) {
		assert(this.#model !== null);
		const db = this.#model.db;
		let sqlRequest = `
			SELECT {{authCodeProp.name|snakeCase}}, {{authLockProp.name|snakeCase}}
			FROM {{authTableName}}
			WHERE id = ?;`;
		let sqlParams = [
			{{authObject.name|camelCase}}Id,
		];
		let result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('Unknown {{authObject.name|pascalCase}} Id');
		if ({{authCodeProp.name}} !== result[0].{{authCodeProp.name|snakeCase}})
			throw new Error('Invalid code');
		if (! result[0].{{authLockProp.name|snakeCase}})
			throw new Error(i18n_t('error.account_not_locked'));

		// unlock {{authObject.name|pascalCase}} account and reset validation code
		sqlRequest = `UPDATE {{authTableName}} 
			SET {{authLockProp.name|snakeCase}} = ?, {{authCodeProp.name|snakeCase}} = ?
			WHERE id= ?`;
		sqlParams = [ false, null, {{authObject.name|camelCase}}Id ];
		result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.affectedRows=== 0) 
			throw new Error(i18n_t('error.account_not_found'));
	}

	static async login({{authIdentProp.name}}, {{authPasswordProp.name}}, i18n_t) {
		assert(this.#model !== null);
		const db = this.#model.db;
		{% liquid
		   assign extra = ''
		   if project.attributes.auth_extra_field
		     assign extra = project.attributes.auth_extra_field | snakeCase | prepend: ', id_'
		   endif
		%}
		let sql = `SELECT id, {{authIdentProp.name|snakeCase}}, {{authPasswordProp.name|snakeCase}}, {{authLockProp.name|snakeCase}}{{extra}}
		{%- for accountField in authAccountFields -%} 
			, {{accountField}}
		{%- endfor %}
			 FROM {{authTableName}} WHERE {{authIdentProp.name}} = ?`;
		const result = await db.query(sql, [ {{authIdentProp.name}} ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error(i18n_t('error.invalid_account_ident'));
		const bcrypt = require('bcrypt');
		const {{authPasswordProp.name}}Valid = await bcrypt.compare({{authPasswordProp.name}}, result[0].{{authPasswordProp.name}});
		if (! {{authPasswordProp.name}}Valid)
			throw new Error(i18n_t('error.invalid_account_ident'));
		if (result[0].{{authLockProp.name}})
			throw new Error('{{authObject.name|pascalCase}} account is locked');
		return {
		{% liquid
		   if project.attributes.auth_extra_field
		   	echo "\t"
			echo project.attributes.auth_extra_field | camelCase | append: 'Id'
			echo project.attributes.auth_extra_field | snakeCase | prepend: ': result[0].id_' | append: ','
		   endif
		%}
			{{authObject.name|camelCase}}Id: result[0].id,
			{{authIdentProp.name|camelCase}} : result[0].{{authIdentProp.name|snakeCase}},
		{%- for accountField in authAccountFields %}
			{{accountField|camelCase}}: result[0].{{accountField|camelCase}},
		{%- endfor %}
		}
	}

	static async logout(token) {
		// FIXME function decodeToken is duplicated 
		const decodeToken = new Promise( (resolve, reject) => {
			const options = {
				ignoreExpiration: true // accept expired tokens
			}
			jwt.verify(token, this.#secret, options, (err, decoded) => {
				if (err !== null) {
					reject('Invalid token');
					return;
				}
				if (decoded.type !== 'refresh') {
					reject('Not a refresh token');
					return;
				}
				if (isNaN(decoded.{{authObject.name|snakeCase}}_id)) {
					reject(`Invalid token content`);
					return;
				}
				if (isNaN(decoded.token_id)) {
					reject(`Invalid token content`);
					return;
				}
			{%- if project.attributes.auth_extra_field %}
				if (isNaN(decoded.{{project.attributes.auth_extra_field | snakeCase}}_id)) {
					reject(`Invalid token content`);
					return;
				}
			{%- endif %}
				resolve([decoded.token_id, decoded.{{authObject.name|snakeCase}}_id
			{%- if project.attributes.auth_extra_field -%}
				, decoded.{{ project.attributes.auth_extra_field | snakeCase }}_id
			{%- endif -%}
			]);
			});
		});
		const [tokenId, {{authObject.name|camelCase}}Id
		{%- if project.attributes.auth_extra_field -%}
			, {{ project.attributes.auth_extra_field | snakeCase }}Id
		{%- endif -%}
		] = await decodeToken;
		assert(tokenId !== undefined);
		assert({{authObject.name|camelCase}}Id !== undefined);
		{% if project.attributes.auth_extra_field -%}
		assert({{project.attributes.auth_extra_field | camelCase | append: 'Id'}} !== undefined);
		{%- endif %}


		let sql = 'DELETE FROM tokens WHERE id = ?';
		assert(this.#model !== null);
		const db = this.#model.db;
		const result = await db.query(sql, [ tokenId ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('Unknown token ID');
	}

	static async generateAccessToken({{authObject.name|camelCase}}Id
	{%- if project.attributes.auth_extra_field -%}
		, {{ project.attributes.auth_extra_field | camelCase }}Id
	{%- endif -%}
	) {
		assert (this.#config.security.accessTokenLifespan !== undefined);
		const accessTokenLifespan = this.#config.security.accessTokenLifespan;
		const payload = {
			{% if project.attributes.auth_extra_field -%}
				{{ project.attributes.auth_extra_field | snakeCase }}_id: {{ project.attributes.auth_extra_field | camelCase }}Id,
			{%- endif %}
			type: 'access',
			{{authObject.name|snakeCase}}_id: {{authObject.name|camelCase}}Id
		};
		return jwt.sign(payload, this.#secret, { expiresIn: `${accessTokenLifespan}s`});
	}

	static async generateRefreshToken({{authObject.name|camelCase}}Id
	{%- if project.attributes.auth_extra_field -%}
		, {{ project.attributes.auth_extra_field | camelCase }}Id
	{%- endif -%}
	) {
		const db = this.#model.db;
		assert (this.#config.security.refreshTokenLifespan !== undefined);
		const refreshTokenLifespan = this.#config.security.refreshTokenLifespan;
		const expirationDate = new Date (Date.now() + refreshTokenLifespan * 86400000); // 24 hours in ms
		const sqlRequest = 'INSERT INTO tokens(id_{{authObject.name|snakeCase}}, expires_at) VALUES (?, ?)';
		const sqlParams = [
			{{authObject.name|camelCase}}Id,
			expirationDate
		];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0)
			throw new Error('Can not store refresh token');
		const tokenId = result.insertId;
		const payload = {
			{% if project.attributes.auth_extra_field -%}
				{{ project.attributes.auth_extra_field | snakeCase }}_id: {{ project.attributes.auth_extra_field | camelCase }}Id,
			{%- endif %}
			type: 'refresh',
			{{authObject.name|snakeCase}}_id: {{authObject.name|camelCase}}Id,
			token_id: tokenId
		};
		return jwt.sign(payload, this.#secret, { expiresIn: `${refreshTokenLifespan}days` });
	}

	static checkAccessToken(token) {
		return new Promise( (resolve, reject) => {
			jwt.verify(token, this.#secret, (err, decoded) => {
				if (err !== null)  {
					if (err.constructor.name === 'TokenExpiredError')
						reject('Expired token') // DO NOT translate (used by API lib)
					else
						reject('Invalid token')
					return
				}
				if (decoded.type !== 'access') {
					reject('Not an access token')
					return
				}
				if (isNaN(decoded.{{authObject.name|snakeCase}}_id)) {
					reject(`Invalid token content`)
					return
				}
				{% if project.attributes.auth_extra_field -%}
				if (isNaN(decoded.{{project.attributes.auth_extra_field}}_id)) {
					reject(`Invalid token content`)
					return
				}
				{%- endif %}
				resolve([decoded.{{authObject.name|snakeCase}}_id
				{%- if project.attributes.auth_extra_field -%}
					, decoded.{{ project.attributes.auth_extra_field | snakeCase }}_id
				{%- endif -%}
				])
			})
		})
	}

	static async checkRefreshToken(token) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const decodeToken = new Promise( (resolve, reject) => {
			jwt.verify(token, this.#secret, (err, decoded) => {
				if (err !== null)  {
					if (err.constructor.name === 'TokenExpiredError')
						reject('Expired token') // DO NOT translate (used by API lib)
					else
						reject('Invalid token')
					return
				}
				if (decoded.type !== 'refresh') {
					reject('Not an refresh token')
					return
				}
				if (isNaN(decoded.token_id) || isNaN(decoded.{{authObject.name|snakeCase}}_id)) {
					reject(`Invalid token content`)
					return
				}
				resolve([decoded.token_id, decoded.{{authObject.name|snakeCase}}_id
				{%- if project.attributes.auth_extra_field -%}
					, decoded.{{project.attributes.auth_extra_field | snakeCase | append: '_id'}}
				{%- endif -%}
				])
			})
		})
		const [tokenId, {{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase | append: 'Id'}}
			{%- endif -%}
		] = await decodeToken;

		assert(tokenId !== undefined);
		assert({{authObject.name|camelCase}}Id !== undefined);
		{% if project.attributes.auth_extra_field -%}
		assert({{project.attributes.auth_extra_field | camelCase | append: 'Id'}} !== undefined);
		{%- endif %}

		const sqlRequest = 'SELECT id FROM tokens WHERE id = ?';
		const sqlParams = [ tokenId ];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		const tokenFound = (result.length === 0) ? false : true
		
		//TODO return extra field
		return [tokenFound, tokenId, {{authObject.name|camelCase}}Id 
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | snakeCase | append: 'Id'}}
			{%- endif -%}
		];
	}


	static async deleteRefreshToken(tokenId) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const sqlRequest = 'DELETE FROM tokens WHERE id = ?';
		const sqlParams = [ tokenId ];
		const result = await db.query(sqlRequest, sqlParams);
		return (result.affectedRows === 0) ? false : true;
	}

	static async checkAccountLocked({{authObject.name|camelCase}}Id) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const sqlRequest = 'SELECT {{authLockProp.name | snakeCase}} FROM {{authTableName}} WHERE id= ?';
		const sqlParams = [ {{authObject.name|camelCase}}Id ];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('{{authObject.name|pascalCase}} not found');
		const locked = result[0].{{authLockProp.name}};
		return locked;
	}

	static async lockAccount({{authObject.name|camelCase}}Id) {
		assert(this.#model !== null);
		const db = this.#model.db;
		// lock account
		let sqlRequest = 'UPDATE {{authTableName}} SET {{authLockProp.name|snakeCase}} = ? WHERE id= ?';
		let sqlParams = [ true, {{authObject.name|camelCase}}Id ];
		let result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.affectedRows=== 0) 
			throw new Error('{{authObject.name|pascalCase}} not found');
		// remove existing {{authObject.name}} tokens
		sqlRequest = 'DELETE FROM tokens WHERE id_{{authObject.name|snakeCase}} = ?';
		sqlParams = [ {{authObject.name|camelCase}}Id ];
		result = await db.query(sqlRequest, sqlParams);
	}

	static async getContext({{authObject.name|camelCase}}Id) {
		assert({{authObject.name|camelCase}}Id !== undefined)
		assert({{authObject.name|camelCase}}Id !== null)
		assert(this.#model !== null);
		const db = this.#model.db;
		let sqlRequest = `
			SELECT id,  {{ authIdentProp.name | snakeCase}}, 
			{%- for accountField in authAccountFields -%}
			{{accountField|snakeCase}},{%echo ' '%} 
			{%- endfor -%}
			{{ authExtraField | snakeCase | prepend: 'id_'  }},
			FROM {{authTableName}} 
			WHERE id = ?;`;
		let sqlParams = [
			{{authObject.name|camelCase}}Id
		];
		let result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('Unknown {{ authObject.name | pascalCase}} Id');
		const context = {
			{{authObject.name|camelCase}}Id: result[0].id,
			{{authIdentProp.name | camelCase}}: result[0].{{authIdentProp.name | snakeCase}},
			{%- for accountField in authAccountFields %}
			{{accountField|camelCase}}: result[0].{{accountField|snakeCase}},
			{%- endfor %}
			{{authExtraField | camelCase }}Id: result[0].id_{{authExtraField | snakeCase }}
		}
		return context
	}

}

module.exports = (config) => {
	AuthModel.initialize(config);
	return AuthModel;
}

