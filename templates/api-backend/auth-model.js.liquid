{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-model.js'
		%}
{% liquid 
	assign authObjectName = project.attributes.auth_object
	assign authTableName  = project.attributes.auth_table_name
	assign authIdentProp = project.attributes.auth_ident_property
	assign authPasswordProp = project.attributes.auth_password_property
%}
'use strict';
const assert = require('assert');
const jwt = require('jsonwebtoken');

class AuthModel {

	static #model = null;
	static #config = null;
	static #secret = null;

	static initialize = (config) => {
		assert(this.#model === null);
		assert(config !== undefined);
		this.#config = config;
		this.#secret = config.security.tokenSecret;
		assert(this.#secret !== undefined);

		const ModelSingleton = require('./model.js');
		this.#model = ModelSingleton.getInstance();
	}

	static async register({{authIdentProp}}, {{authPasswordProp}}) {
		assert(this.#model !== null);
		const db = this.#model.db;
		let sql = 'SELECT {{authIdentProp}} FROM {{authTableName}} WHERE {{authIdentProp}} = ?';
		let result = await db.query(sql, [ {{authIdentProp}} ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length > 0) 
			throw new Error('An account with this {{authIdentProp}} already exists');
		assert(this.#config.security.hashSalt !== undefined);
		const saltRounds = this.#config.security.hashSalt;
		const bcrypt = require('bcrypt');
		const {{authPasswordProp}}Hash = await bcrypt.hash({{authPasswordProp}}, saltRounds)
		const sqlRequest = `INSERT INTO {{authTableName}}({{authIdentProp}}, {{authPasswordProp}}) VALUES (?, ?);`;
		const sqlParams = [
			{{authIdentProp}},
			{{authPasswordProp}}Hash
		];
		result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		return {
			{{authObjectName}}Id : result.insertId
		}
	}

	static async login({{authIdentProp}}, {{authPasswordProp}}) {
		assert(this.#model !== null);
		const db = this.#model.db;
		{% liquid
		   assign extra = ''
		   if project.attributes.auth_extra_field
		     assign extra = project.attributes.auth_extra_field | snakeCase | prepend: ', id_'
		   endif
		%}
		let sql = 'SELECT id, {{authIdentProp}}, {{authPasswordProp}}, account_locked{{extra}} FROM {{authTableName}} WHERE {{authIdentProp}} = ?';
		const result = await db.query(sql, [ {{authIdentProp}} ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('Unknown {{authIdentProp}} or invalid {{authPasswordProp}}');
		const bcrypt = require('bcrypt');
		const {{authPasswordProp}}Valid = await bcrypt.compare({{authPasswordProp}}, result[0].{{authPasswordProp}});
		if (! {{authPasswordProp}}Valid)
			throw new Error('Unknown {{authIdentProp}} or invalid {{authPasswordProp}}');
		if (result[0].account_locked)
			throw new Error('{{authObjectName | pascalCase}} account is locked');
		return {
		{% liquid
		   if project.attributes.auth_extra_field
		   	echo "\t"
			echo project.attributes.auth_extra_field | camelCase | append: 'Id'
			echo project.attributes.auth_extra_field | snakeCase | prepend: ': result[0].id_' | append: ','
		   endif
		%}
			{{authObjectName}}Id: result[0].id
		}
	}

	static async logout(token) {
		// FIXME function decodeToken is duplicated 
		const decodeToken = new Promise( (resolve, reject) => {
			jwt.verify(token, this.#secret, (err, decoded) => {
				if (err !== null && err.constructor.name !== 'TokenExpiredError')
					reject('Invalid token');
				if (decoded.type !== 'refresh')
					reject('Not a refresh token');
				if (isNaN(decoded.user_id))
					reject(`Invalid token content`);
				if (isNaN(decoded.token_id))
					reject(`Invalid token content`);
			{%- if project.attributes.auth_extra_field %}
				if (isNaN(decoded.{{project.attributes.auth_extra_field | snakeCase}}_id))
					reject(`Invalid token content`);
			{%- endif %}
				resolve([decoded.user_id, decoded.token_id
			{%- if project.attributes.auth_extra_field -%}
				, decoded.{{ project.attributes.auth_extra_field | snakeCase }}_id
			{%- endif -%}
			]);
			});
		});
		const [userId, tokenId
		{%- if project.attributes.auth_extra_field -%}
			, {{ project.attributes.auth_extra_field | snakeCase }}Id
		{%- endif -%}
		] = await decodeToken;
		let sql = 'DELETE FROM tokens WHERE id = ?';
		assert(this.#model !== null);
		const db = this.#model.db;
		const result = await db.query(sql, [ tokenId ]);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('Unknown token ID');
	}

	static async generateAccessToken({{authObjectName}}Id
	{%- if project.attributes.auth_extra_field -%}
		, {{ project.attributes.auth_extra_field | camelCase }}Id
	{%- endif -%}
	) {
		assert (this.#config.security.accessTokenLifespan !== undefined);
		const accessTokenLifespan = this.#config.security.accessTokenLifespan;
		const payload = {
			{% if project.attributes.auth_extra_field -%}
				{{ project.attributes.auth_extra_field | snakeCase }}_id: {{ project.attributes.auth_extra_field | camelCase }}Id,
			{%- endif %}
			type: 'access',
			{{authObjectName}}_id: {{authObjectName}}Id
		};
		return jwt.sign(payload, this.#secret, { expiresIn: `${accessTokenLifespan}m`});
	}

	static async generateRefreshToken({{authObjectName}}Id
	{%- if project.attributes.auth_extra_field -%}
		, {{ project.attributes.auth_extra_field | camelCase }}Id
	{%- endif -%}
	) {
		const db = this.#model.db;
		assert (this.#config.security.refreshTokenLifespan !== undefined);
		const refreshTokenLifespan = this.#config.security.refreshTokenLifespan;
		const expirationDate = new Date (Date.now() + refreshTokenLifespan * 86400000); // 24 hours in ms
		const sqlRequest = 'INSERT INTO tokens(id_{{authObjectName}}, expires_at) VALUES (?, ?)';
		const sqlParams = [
			{{authObjectName}}Id,
			expirationDate
		];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0)
			throw new Error('Can not store refresh token');
		const tokenId = result.insertId;
		const payload = {
			{% if project.attributes.auth_extra_field -%}
				{{ project.attributes.auth_extra_field | snakeCase }}_id: {{ project.attributes.auth_extra_field | camelCase }}Id,
			{%- endif %}
			type: 'refresh',
			{{authObjectName}}_id: {{authObjectName}}Id,
			token_id: tokenId
		};
		return jwt.sign(payload, this.#secret, { expiresIn: `${refreshTokenLifespan}days` });
	}

	static checkAccessToken(token) {
		return new Promise( (resolve, reject) => {
			jwt.verify(token, this.#secret, (err, decoded) => {
				if (err !== null)  {
					if (err.constructor.name === 'TokenExpiredError')
						reject('Expired token');
					else
						reject('Invalid token');
				}
				if (decoded.type !== 'access')
					reject('Not an access token');
				if (isNaN(decoded.{{authObjectName}}_id))
					reject(`Invalid token content`);
				{% if project.attributes.auth_extra_field -%}
				if (isNaN(decoded.{{project.attributes.auth_extra_field}}_id))
					reject(`Invalid token content`);
				{%- endif %}
				resolve(decoded.{{authObjectName}}_id
				{%- if project.attributes.auth_extra_field -%}
					, decoded.{{ project.attributes.auth_extra_field | snakeCase }}_id
				{%- endif -%}
				);
			});
		});
	}

	static async checkRefreshToken(token) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const decodeToken = new Promise( (resolve, reject) => {
			jwt.verify(token, this.#secret, (err, decoded) => {
				if (err !== null)  {
					if (err.constructor.name === 'TokenExpiredError')
						reject('Expired token');
					else
						reject('Invalid token');
				}
				if (decoded.type !== 'refresh')
					reject('Not an refresh token');
				if (isNaN(decoded.token_id) || isNaN(decoded.{{authObjectName}}_id))
					reject(`Invalid token content`);
				resolve([decoded.token_id, decoded.{{authObjectName}}_id]);
			});
		});
		const [tokenId, {{authObjectName}}Id] = await decodeToken;

		const sqlRequest = 'SELECT id FROM tokens WHERE id = ?';
		const sqlParams = [ tokenId ];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		const tokenFound = (result.length === 0) ? false : true
		
		return [tokenFound, tokenId, {{authObjectName}}Id];
	}


	static async deleteRefreshToken(tokenId) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const sqlRequest = 'DELETE FROM tokens WHERE id = ?';
		const sqlParams = [ tokenId ];
		const result = await db.query(sqlRequest, sqlParams);
		return (result.affectedRows === 0) ? false : true;
	}

	static async checkAccountLocked({{authObjectName}}Id) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const sqlRequest = 'SELECT account_locked FROM {{authTableName}} WHERE id= ?';
		const sqlParams = [ {{authObjectName}}Id ];
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.length === 0) 
			throw new Error('{{authObjectName | pascalCase}} not found');
		const locked = result[0].account_locked;
		return locked;
	}

	static async lockAccount({{authObjectName}}Id) {
		assert(this.#model !== null);
		const db = this.#model.db;
		// lock account
		let sqlRequest = 'UPDATE {{authTableName}} SET account_locked = ? WHERE id= ?';
		let sqlParams = [ true, {{authObjectName}}Id ];
		let result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		if (result.affectedRows=== 0) 
			throw new Error('{{authObjectName | pascalCase}} not found');
		// remove existing {{authObjectName}} tokens
		sqlRequest = 'DELETE FROM tokens WHERE id_{{authObjectName}} = ?';
		sqlParams = [ {{authObjectName}}Id ];
		result = await db.query(sqlRequest, sqlParams);
	}


}

module.exports = (config) => {
	AuthModel.initialize(config);
	return AuthModel;
}

