{%- assign filename = object.name | kebabCase | append: "-routes.js" -%}
{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : filename 
		%}
{% liquid
   assign root_object = project.attributes.root_object 
   assign root_property = ''
   if object.name == root_object
     assign root_property = 'id'
   else
     if root_object 
       for link in object.links 
	 if link.target.name == root_object
	   assign root_property = link.name | camelCase | append: 'Id'
	 endif
       endfor
     endif
   endif
%}
'use script';
const assert = require('assert');
const {withAuth} = require('./auth-routes');

module.exports = (app, {{object.name | pascalCase}}Model, View) => {

	app.get('/api/{{project.attributes.api_version}}/{{object.name | kebabCase}}/list', withAuth, async (request, response) => {
		const filters = {};
		{%- for link in object.links %}
		{% assign paramName = link.target.name | camelCase | append: 'Id' -%}
		let {{paramName}} = request.query.{{paramName}};
		if ({{paramName}} !== undefined) {
			if (isNaN({{paramName}}))
				throw new Error('Query <{{paramName}}> is not a number');
			{{paramName}} = parseInt({{paramName}});
			filters.{{paramName}} = {{paramName}};
		}
		{%- endfor %}
		assert(request.{{root_object|camelCase}}Id !== undefined);
		try {
			if (filters.{{root_object|camelCase}}Id === undefined) {
				filters.{{root_object|camelCase}}Id = request.{{root_object|camelCase}}Id;
			}
			else {
				if (filters.{{root_object|camelCase}}Id !== request.{{root_object|camelCase}}Id)
					throw new Error('Unauthorized access');
			}
			let resultsPerPage = request.query.resultsPerPage;
			let offset = request.query.offset;
			const params = {
				resultsPerPage : resultsPerPage,
				offset : offset
			};
			const {{object.name|camelCase}}List = await {{object.name | pascalCase}}Model.find{{object.name|pascalCase}}List(filters, params);
			View.sendJsonResult(response, { {{object.name | camelCase}}List });
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


	app.get('/api/{{project.attributes.api_version}}/{{object.name | kebabCase}}/:{{object.name | camelCase}}Id', withAuth, async (request, response) => {
		let {{object.name | camelCase}}Id = request.params.{{object.name | camelCase}}Id;
		assert ({{object.name | camelCase}}Id !== undefined);
		if (isNaN({{object.name | camelCase}}Id)) {
			View.sendJsonError(response, `{{object.name | pascalCase}} ID <${ {{object.name | camelCase}}Id}> is not a number`);
			return;
		}
		{{object.name | camelCase}}Id = parseInt({{object.name | camelCase}}Id);
		try {
			const {{object.name | camelCase}} = await {{object.name | pascalCase}}Model.get{{object.name | pascalCase}}ById({{object.name | camelCase}}Id);
			if ({{object.name | camelCase}} === null)
				throw new Error(`{{object.name | pascalCase}} ID <${ {{object.name | camelCase}}Id }> not found`);
			{% if root_property == '' -%}
			// No root property to control
			{%- else -%}
			// control root property 
			if (request.{{root_object | camelCase}}Id !== {{object.name | camelCase}}.{{root_property}})
				throw new Error('Unauthorized access');
			{%- endif %}
			View.sendJsonResult(response, { {{object.name | camelCase}}: {{object.name | camelCase}}});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


	app.get('/api/{{project.attributes.api_version}}/{{object.name | kebabCase}}/:{{object.name | camelCase}}Id/children-count', withAuth, async (request, response) => {
		let {{object.name|camelCase}}Id = request.params.{{object.name|camelCase}}Id;
		assert ({{object.name|camelCase}}Id !== undefined);
		if (isNaN({{object.name|camelCase}}Id)) {
			View.sendJsonError(response, `Offer ID <${ {{object.name|camelCase}}Id}> is not a number`);
			return;
		}
		{{object.name|camelCase}}Id = parseInt({{object.name|camelCase}}Id);
		try {
			const childrenCountList = await OfferModel.getChildrenCountList({{object.name|camelCase}}Id);
			if (childrenCountList === null)
				throw new Error(`Offer ID <${ {{object.name|camelCase}}Id }> not found`);
			View.sendJsonResult(response, { childrenCountList } );
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	})



	app.post('/api/{{project.attributes.api_version}}/{{object.name | snakeCase}}/create', withAuth, async (request, response) => {
		try {
			const {{object.name | camelCase}} = request.body.{{object.name | camelCase}};
			if ({{object.name | camelCase}} === undefined)
				throw new Error(`Can't find <{{object.name | camelCase}}> object in request body`);
			let new{{object.name | pascalCase}} = await {{object.name | pascalCase}}Model.create{{object.name | pascalCase}}({{object.name | camelCase}});
			if (new{{object.name | pascalCase}}.id === undefined)
				throw new Error(`Can't find ID of newly created {{object.name | pascalCase}}`);
			View.sendJsonResult(response, { {{object.name | camelCase}} : new{{object.name | pascalCase}} });
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});

	app.post('/api/{{project.attributes.api_version}}/{{object.name | snakeCase}}/edit', withAuth, async (request, response) => {
		try {
			const {{object.name | camelCase}} = request.body.{{object.name | camelCase}}
			if ({{object.name | camelCase}} === undefined)
				throw new Error(`Can't find <{{object.name | camelCase}}> object in request body`)
			let edited{{object.name | pascalCase}} = await {{object.name | pascalCase}}Model.edit{{object.name | pascalCase}}({{object.name | camelCase}})
			if (edited{{object.name|pascalCase}}.id !== {{object.name|camelCase}}.id)
				throw new Error(`Edited {{object.name | pascalCase}} ID does not match`)
			View.sendJsonResult(response, { {{object.name|camelCase}} : edited{{object.name|pascalCase}} })
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


	app.post('/api/{{project.attributes.api_version}}/{{object.name | kebabCase}}/:{{object.name | camelCase}}Id/delete', withAuth, async (request, response) => {
		let {{object.name | camelCase}}Id = request.params.{{object.name | camelCase}}Id;
		assert ({{object.name | camelCase}}Id !== undefined);
		if (isNaN({{object.name | camelCase}}Id)) {
			View.sendJsonError(response, `{{object.name | pascalCase}} ID <${ {{object.name | camelCase}}Id}> is not a number`);
			return;
		}
		{{object.name | camelCase}}Id = parseInt({{object.name | camelCase}}Id);
		let recursive = request.body.recursive
		if (recursive  === undefined)
			recursive = false
		if (typeof(recursive) !== 'boolean') {
			View.sendJsonError(response, `recursive parameter is not a boolean`);
			return;
		}
		try {
			const {{object.name | camelCase}} = await {{object.name | pascalCase}}Model.get{{object.name | pascalCase}}ById({{object.name | camelCase}}Id);
			if ({{object.name | camelCase}} === null)
				throw new Error(`{{object.name | pascalCase}} ID <${ {{object.name | camelCase}}Id }> not found`);
			{% if root_property == '' -%}
			// No root property to control
			{%- else -%}
			// control root property 
			if (request.{{root_object | camelCase}}Id !== {{object.name | camelCase}}.{{root_property}})
				throw new Error('Unauthorized access');
			{%- endif %}
			const success = await {{object.name | pascalCase}}Model.deleteById({{object.name | camelCase}}Id, recursive);
			View.sendJsonResult(response, {success});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


}

