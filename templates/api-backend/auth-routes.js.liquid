{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-routes.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
	assign authIdentProp = authObject.properties | where: 'name', project.attributes.auth_ident_property | first
	assign authPasswordProp = authObject.properties | where: 'name', project.attributes.auth_password_property | first
	assign authCodeProp = authObject.properties | where: 'name', project.attributes.auth_code_property | first
%}
'use strict';
const assert = require('assert');

let _config = null;
let _authModel = null;

exports.initialize = (app, authModel, View, config) => {
	assert(config !== undefined);
	_config = config;
	_authModel = authModel;

	app.use( async (request, response, next) => {
		assert(_authModel !== null);
		let {{authObject.name|camelCase}}Id = null;
		{% if project.attributes.auth_extra_field -%}
		let {{project.attributes.auth_extra_field | camelCase}}Id = null;
		{%- endif %}
		const token = request.headers['x-access-token'];
		if (token !== undefined) {
			try {
				[{{authObject.name|camelCase}}Id
				{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
				{%- endif -%}

			] = await _authModel.checkAccessToken(token);
			}
			catch (error) {
				View.sendJsonError(response, error);
				return;
			}
		}
		request.{{authObject.name|camelCase}}Id = {{authObject.name|camelCase}}Id;
		{% if project.attributes.auth_extra_field -%}
		request.{{project.attributes.auth_extra_field | camelCase}}Id = {{project.attributes.auth_extra_field | camelCase}}Id; 
		{%- endif %}
		next();
	});

	app.post('/api/{{project.attributes.api_version}}/auth/register', async (request, response) => {
		try {
			const {{authIdentProp.name|camelCase}} = request.body.{{authIdentProp.name|camelCase}};
			if ({{authIdentProp.name|camelCase}} === undefined)
				throw new Error(`Can't find <{{authIdentProp.name|camelCase}}> in request body`);
			if ({{authIdentProp.name|camelCase}}.match(/{{authIdentProp.attributes.pattern}}/) === null)
				throw new Error('Invalid {{authIdentProp.name|camelCase}}');

			// TODO control password complexity
			const {{authPasswordProp.name|camelCase}} = request.body.{{authPasswordProp.name|camelCase}};
			if ({{authPasswordProp.name|camelCase}} === undefined)
				throw new Error(`Can't find <{{authPasswordProp.name|camelCase}}> in request body`);
			if ({{authPasswordProp.name|camelCase}}.length < {{authPasswordProp.minimum}})
				throw new Error(`Value of <{{authPasswordProp.name|camelCase}}> in request body is too short`);
			if ({{authPasswordProp.name|camelCase}}.length > {{authPasswordProp.maximum}})
				throw new Error(`Value of <{{authPasswordProp.name|camelCase}}> in request body is too long`);

			// make a random validation code which will be sent by email to unlock account
			const {{authCodeProp.name|camelCase}} = _authModel.generateValidationCode();
			console.log(`Validation code is ${ {{authCodeProp.name|camelCase}} }`); // TODO remove this

			const result = await _authModel.register({{authIdentProp.name|camelCase}}, {{authPasswordProp.name|camelCase}}, {{authCodeProp.name|camelCase}});
			const {{authObject.name|camelCase}}Id = result.{{authObject.name|camelCase}}Id; 
			assert({{authObject.name|camelCase}}Id !== undefined);
			{% if project.attributes.auth_extra_field -%}
			const {{project.attributes.auth_extra_field | camelCase}}Id = null;
			{%- endif %}

			await _authModel.sendValidationCode({{authCodeProp.name|camelCase}}, {{authIdentProp.name|camelCase}});

			// generate access and refresh tokens
			const newAccessToken  = await _authModel.generateAccessToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			View.sendJsonResult(response, {
				'{{authObject.name|camelCase}}Id': {{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | camelCase}}Id': {{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});

	app.post('/api/{{project.attributes.api_version}}/auth/validateRegistration', exports.withAuth, async (request, response) => {
		assert(request.{{authObject.name|camelCase}}Id !== undefined);
		// FIXME userId is already defined with token (request.userId)
		const {{authObject.name|camelCase}}Id = request.{{authObject.name|camelCase}}Id;
		try {
			let {{authCodeProp.name|camelCase}} = request.body.{{authCodeProp.name|camelCase}};
			if ({{authCodeProp.name|camelCase}} === undefined)
				throw new Error(`Can't find <{{authCodeProp.name|camelCase}}> in request body`);
			if (isNaN({{authCodeProp.name|camelCase}}))
				throw new Error(`<{{authCodeProp.name|camelCase}}> in request body is not an integer`);
			{{authCodeProp.name|camelCase}} = parseInt({{authCodeProp.name|camelCase}});
			if ({{authCodeProp.name|camelCase}} < {{authCodeProp.minimum}} || {{authCodeProp.name|camelCase}} > {{authCodeProp.maximum}})
				throw new Error(`<{{authCodeProp.name|camelCase}}> in request body is out of range`);

			await _authModel.validateRegistration({{authObject.name|camelCase}}Id, {{authCodeProp.name|camelCase}});
			View.sendJsonResult(response, {});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


	app.post('/api/{{project.attributes.api_version}}/auth/login', async (request, response) => {
		try {
			const {{authIdentProp.name|camelCase}} = request.body.{{authIdentProp.name|camelCase}};
			if ({{authIdentProp.name|camelCase}} === undefined)
				throw new Error(`Can't find <{{authIdentProp.name|camelCase}}> in request body`);
			const {{authPasswordProp.name|camelCase}} = request.body.{{authPasswordProp.name|camelCase}};
			if ({{authPasswordProp.name|camelCase}} === undefined)
				throw new Error(`Can't find <{{authPasswordProp.name|camelCase}}> in request body`);

			const login = await _authModel.login({{authIdentProp.name|camelCase}}, {{authPasswordProp.name|camelCase}});
			assert (! isNaN(login.{{authObject.name|camelCase}}Id)) ;
			const newAccessToken  = await _authModel.generateAccessToken(login.{{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
			, login.{{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken(login.{{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
			, login.{{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			View.sendJsonResult(response, {
				'{{authObject.name|camelCase}}Id' : login.{{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | camelCase}}Id': login.{{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'{{authIdentProp.name|camelCase}}': login.{{authIdentProp.name|camelCase}},
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});

	app.post('/api/{{project.attributes.api_version}}/auth/logout', async (request, response) => {
		try {
			const refreshToken = request.body.refreshToken;
			if (refreshToken === undefined)
				throw new Error(`Can't find <refreshToken> in request body`);
			await _authModel.logout(refreshToken);
			View.sendJsonResult(response, {});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});


	app.post('/api/{{project.attributes.api_version}}/auth/refresh', async (request, response) => {
		try {
			const refreshToken = request.body.token;
			if (refreshToken === undefined)
				throw new Error(`Can't find <token> in request body`);
			const [tokenFound, tokenId, {{authObject.name|camelCase}}Id 
			{%- if project.attributes.auth_extra_field -%}
			, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
				] = await _authModel.checkRefreshToken(refreshToken);
			if (! tokenFound) {
				// if a token is not found, it should be an attempt to usurp cookie :
				// since a refresh token is deleted when used, it will not be found with a second attempt to use it.
				await _authModel.lockAccount({{authObject.name|camelCase}}Id);
				throw new Error('Attempt to reuse a token');
			}

			await _authModel.deleteRefreshToken(tokenId);

			if (await _authModel.checkAccountLocked({{authObject.name|camelCase}}Id))
				throw new Error('Account locked');

			const newAccessToken  = await _authModel.generateAccessToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			View.sendJsonResult(response, {
				'{{authObject.name|camelCase}}Id' : {{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | camelCase}}Id': {{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			View.sendJsonError(response, error);
		}
	});

}

exports.withAuth = async (request, response, next) => {
	if (request.{{authObject.name|camelCase}}Id === null) {
		response.json({ ok: false, error: 'Unauthorized access (not logged in)'});
		return;
	}
	next();
}

// FIXME duplicated code with previous middleware (withAuth)
exports.withUserAuth = async (request, response, next) => {
	if (request.{{authObject.name|camelCase}}Id === null) {
		View.sendJsonError(response, 'Unautorized access');
		return;
	}
	next();
}
