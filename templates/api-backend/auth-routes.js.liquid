{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-routes.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
	assign authIdentProp = authObject.properties | where: 'name', project.attributes.auth_ident_property | first
	assign authPasswordProp = authObject.properties | where: 'name', project.attributes.auth_password_property | first
	assign authCodeProp = authObject.properties | where: 'name', project.attributes.auth_code_property | first
	assign authLockProp = authObject.properties | where: 'name', project.attributes.auth_lock_property | first
%}
'use strict';
const assert = require('assert');

let _config = null;
let _authModel = null;

exports.initialize = (app, authModel, View, config) => {
	assert(config !== undefined);
	_config = config;
	_authModel = authModel;

	app.use( async (request, response, next) => {
		assert(_authModel !== null);
		let {{authObject.name|camelCase}}Id = null;
		{% if project.attributes.auth_extra_field -%}
		let {{project.attributes.auth_extra_field | camelCase}}Id = null;
		{%- endif %}
		const token = request.headers['x-access-token'];
		if (token !== undefined) {
			try {
				[{{authObject.name|camelCase}}Id
				{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
				{%- endif -%}

			] = await _authModel.checkAccessToken(token);
			}
			catch (error) {
				const errorMessage = (error.message !== undefined) ? error.message : error;
				console.error(errorMessage);
			}
		}
		request.{{authObject.name|camelCase}}Id = {{authObject.name|camelCase}}Id;
		{% if project.attributes.auth_extra_field -%}
		request.{{project.attributes.auth_extra_field | camelCase}}Id = {{project.attributes.auth_extra_field | camelCase}}Id; 
		{%- endif %}
		next();
	});

	app.post('/api/{{project.attributes.api_version}}/auth/register', async (request, response) => {
		try {
			const {{authIdentProp.name}} = request.body.{{authIdentProp.name}};
			if ({{authIdentProp.name}} === undefined)
				throw new Error(`Can't find <{{authIdentProp.name}}> in request body`);
			if ({{authIdentProp.name}}.match(/{{authIdentProp.attributes.pattern}}/) === null)
				throw new Error('Invalid {{authIdentProp.name}}');

			// TODO control password complexity
			const {{authPasswordProp.name}} = request.body.{{authPasswordProp.name}};
			if ({{authPasswordProp.name}} === undefined)
				throw new Error(`Can't find <{{authPasswordProp.name}}> in request body`);
			if ({{authPasswordProp.name}}.length < {{authPasswordProp.minimum}})
				throw new Error(`Value of <{{authPasswordProp.name}}> in request body is too short`);
			if ({{authPasswordProp.name}}.length > {{authPasswordProp.maximum}})
				throw new Error(`Value of <{{authPasswordProp.name}}> in request body is too long`);

			// make a random validation code which will be sent by email to unlock account
			const {{authCodeProp.name}} = _authModel.generateValidationCode();
			console.log(`Validation code is ${ {{authCodeProp.name}} }`); // TODO remove this

			const result = await _authModel.register({{authIdentProp.name}}, {{authPasswordProp.name}}, {{authCodeProp.name}});
			const {{authObject.name|camelCase}}Id = result.{{authObject.name|camelCase}}Id; 
			assert({{authObject.name|camelCase}}Id !== undefined);
			{% if project.attributes.auth_extra_field -%}
			const {{project.attributes.auth_extra_field | camelCase}}Id = null;
			{%- endif %}

			await _authModel.sendValidationCode({{authCodeProp.name}}, {{authIdentProp.name}});

			// generate access and refresh tokens
			const newAccessToken  = await _authModel.generateAccessToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);

			response.json({ ok : true, 
				'{{authObject.name|kebabCase}}-id': {{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | kebabCase}}-id': {{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});

	app.post('/api/{{project.attributes.api_version}}/auth/validate', async (request, response) => {
		try {
			const {{authCodeProp.name}} = request.body.{{authCodeProp.name}};
			if ({{authCodeProp.name}} === undefined)
				throw new Error(`Can't find <{{authCodeProp.name}}> in request body`);
			if (isNaN({{authCodeProp.name}}))
				throw new Error(`<{{authCodeProp.name}}> in request body is not an integer`);
			{{authCodeProp.name}} = parseInt({{authCodeProp.name}});
			if ({{authCodeProp.name}} < {{authCodeProp.minimum}} || {{authCodeProp.name}} > {{authCodeProp.maximum}})
				throw new Error(`<{{authCodeProp.name}}> in request body is out of range`);

		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});


	app.post('/api/{{project.attributes.api_version}}/auth/login', async (request, response) => {
		try {
			const {{authIdentProp.name}} = request.body.{{authIdentProp.name}};
			if ({{authIdentProp.name}} === undefined)
				throw new Error(`Can't find <{{authIdentProp.name}}> in request body`);
			const {{authPasswordProp.name}} = request.body.{{authPasswordProp.name}};
			if ({{authPasswordProp.name}} === undefined)
				throw new Error(`Can't find <{{authPasswordProp.name}}> in request body`);

			const login = await _authModel.login({{authIdentProp.name}}, {{authPasswordProp.name}});
			assert (! isNaN(login.{{authObject.name|camelCase}}Id)) ;
			const newAccessToken  = await _authModel.generateAccessToken(login.{{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
			, login.{{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken(login.{{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
			, login.{{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			response.json({ ok : true, 
				'{{authObject.name|camelCase}}Id' : login.{{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | camelCase}}Id': login.{{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});

	app.get('/api/{{project.attributes.api_version}}/auth/logout', async (request, response) => {
		try {
			throw new Error("Logout is not yet implemented");
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});

	app.post('/api/{{project.attributes.api_version}}/auth/logout', async (request, response) => {
		try {
			const refreshToken = request.body.refreshToken;
			if (refreshToken === undefined)
				throw new Error(`Can't find <refreshToken> in request body`);
			await _authModel.logout(refreshToken);
			response.json({ ok : true});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});


	app.post('/api/{{project.attributes.api_version}}/auth/refresh', async (request, response) => {
		try {
			const refreshToken = request.body.token;
			if (refreshToken === undefined)
				throw new Error(`Can't find <token> in request body`);
			const [tokenFound, tokenId, {{authObject.name|camelCase}}Id 
			{%- if project.attributes.auth_extra_field -%}
			, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
				] = await _authModel.checkRefreshToken(refreshToken);
			if (! tokenFound) {
				// if a token is not found, it should be an attempt to usurp cookie :
				// since a refresh token is deleted when used, it will not be found with a second attempt to use it.
				await _authModel.lockAccount({{authObject.name|camelCase}}Id);
				throw new Error('Attempt to reuse a token');
			}

			await _authModel.deleteRefreshToken(tokenId);

			if (await _authModel.checkAccountLocked({{authObject.name|camelCase}}Id))
				throw new Error('Account locked');

			const newAccessToken  = await _authModel.generateAccessToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);
			const newRefreshToken = await _authModel.generateRefreshToken({{authObject.name|camelCase}}Id
			{%- if project.attributes.auth_extra_field -%}
				, {{project.attributes.auth_extra_field | camelCase}}Id
			{%- endif -%}
			);

			response.json({ ok : true, 
				'{{authObject.name|kebabCase}}-id' : {{authObject.name|camelCase}}Id,
				{% if project.attributes.auth_extra_field -%}
				'{{project.attributes.auth_extra_field | kebabCase}}-id': {{project.attributes.auth_extra_field | camelCase}}Id,
				{%- endif %}
				'access-token': newAccessToken,
				'refresh-token': newRefreshToken
			});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			console.error(errorMessage);
			response.json({ ok : false, error: errorMessage });
		}
	});

}

// FIXME not used ? 
exports.withAuth = async (request, response, next) => {
	assert(_authModel !== null);
	try {
		const token = request.headers['x-access-token'];
		if (token === undefined) 
			throw new Error(`HTTP header <x-access-token> not found`);
		const [{{authObject.name|camelCase}}Id 
		{%- if project.attributes.auth_extra_field -%}
			, {{project.attributes.auth_extra_field | camelCase}}Id
		{%- endif -%}
		] = await _authModel.checkAccessToken(token);
		request.{{authObject.name|camelCase}}Id = {{authObject.name|camelCase}}Id;
		{% if project.attributes.auth_extra_field -%}
		request.{{project.attributes.auth_extra_field | camelCase}}Id = {{project.attributes.auth_extra_field | camelCase}}Id;
		{%- endif %}
		next();
	}
	catch (error) {
		const errorMessage = (error.message !== undefined) ? error.message : error;
		response.json({ ok: false, error: errorMessage });
	}
}

exports.withUserAuth = async (request, response, next) => {
	console.log("dOm withUserAuth  userId:" + request.userId + ", companyId:" + request.companyId);
	if (request.userId === null) {
		console.error('Unautorized access');
		response.json({ ok: false, error: 'Unautorized access'});
		return;
	}
	next();
}
