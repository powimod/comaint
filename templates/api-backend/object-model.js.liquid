{%- assign filename = object.name | kebabCase | append: "-model.js" -%}
{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : filename 
		%}
{% liquid 
assign idProperty = null
assign hasSecret = false
for property in object.properties
	if property.type.name == 'id' 
		assign idProperty = property.name
	endif
	if property.secret == true
		assign hasSecret = true
	endif
endfor
-%}

'use strict'
const assert = require('assert');
{%- if  hasSecret %}
const bcrypt = require('bcrypt'); 
{%- endif %}

const { {{object.name|camelCase}}ObjectDef } = require('../objects/{{object.name|kebabCase}}-object-def.cjs')
const objectUtils = require('../objects/object-util.cjs')

class {{object.name | pascalCase }}Model {
{%- if  hasSecret %}
	static #config = null;
{%- endif %}
	static #model = null;

	static initialize = ({%- if  hasSecret -%}config{%- endif - %}) => {
		assert(this.#model === null);
		{%- if  hasSecret %}
		assert(config !== undefined)
		this.#config = config;
		{%- endif %}
		const ModelSingleton = require('./model.js');
		this.#model = ModelSingleton.getInstance();
		assert(this.#model !== null)
	}

	static async getIdList(filters) {
		assert(filters !== undefined);
		assert(this.#model !== null);
		const db = this.#model.db;

		const sqlValues = [];
		const sqlFilters = [];
		{%- for link in object.links %}
		if (filters.{{link.name|camelCase}}Id !== undefined) {
			sqlFilters.push('id_{{link.name|snakeCase}} = ?')
			sqlValues.push(filters.{{link.name|camelCase}}Id)
		}
		{%- endfor %}
		const whereClause = sqlFilters.length === 0 ? '' : 'WHERE ' + sqlFilters.join(' AND ')

		let sql = `SELECT id FROM {{object.attributes.table_name }} ${whereClause}`
		const result = await db.query(sql, sqlValues)
		if (result.code) 
			throw new Error(result.code)
		const idList = []
		for (let record of result) 
			idList.push( record.Id)
		return idList;
	}

	static async find{{object.name|pascalCase}}Count(filters) {
		assert(filters !== undefined);
		assert(this.#model !== null);
		const db = this.#model.db;

		const sqlValues = [];
		const sqlFilters = [];
		{%- for link in object.links %}
		if (filters.{{link.name|camelId}}Id !== undefined) {
			sqlFilters.push('id_{{link.name|snakeCase}} = ?')
			sqlValues.push(filters.{{link.name|camelCase}}Id)
		}
		{%- endfor %}
		{%- for property in object.properties %}
		if (filters.{{property.name|camelCase}} !== undefined) {
			sqlFilters.push('{{property.name|snakeCase}} = ?')
			sqlValues.push(filters.{{property.name|camelCase}})
		}
		{%- endfor %}
		const whereClause = sqlFilters.length === 0 ? '' : 'WHERE ' + sqlFilters.join(' AND ')

		let sql = `SELECT COUNT(id) as counter FROM {{object.attributes.table_name}} ${whereClause}`
		const result = await db.query(sql, sqlValues)
		if (result.code)
			throw new Error(result.code)
		return result[0].counter;
	}


	static async getList(filters, params) {
		assert(filters !== undefined);
		assert(params !== undefined);
		assert(this.#model !== null);
		const db = this.#model.db;

		const sqlValues = [];
		const sqlFilters = [];
		{%- assign root_object = project.attributes.root_object %}
		{%- if object.name == root_object %}
		sqlFilters.push('id = ?')
		sqlValues.push(filters.{{object.name|camelCase}}Id);
		{%- endif -%}
		{%- for link in object.links %}
		if (filters.{{link.name|camelCase}}Id !== undefined) {
			sqlFilters.push('id_{{link.name|snakeCase}} = ?')
			sqlValues.push(filters.{{link.name|camelCase}}Id);
		}
		{%- endfor %}
		const whereClause = sqlFilters.length === 0 ? '' : 'WHERE ' + sqlFilters.join(' AND ');

		let resultsPerPage = params.resultsPerPage; 
		if (resultsPerPage === undefined || isNaN(resultsPerPage)) 
			resultsPerPage = 25; // TODO hard coded value
		else
			resultsPerPage = parseInt(resultsPerPage);
		if (resultsPerPage < 1) resultsPerPage = 1;
		sqlValues.push(resultsPerPage);

		let offset = params.offset; 
		if (offset=== undefined || isNaN(resultsPerPage)) 
			offset = 0
		else
			offset = parseInt(offset);
		if (offset < 0) offset = 0;
		sqlValues.push(offset);

		let sql = `SELECT * FROM {{object.attributes.table_name }} ${whereClause} LIMIT ? OFFSET ?`;
		// TODO select with column names and not jocker
		// TODO order by
		// TODO field selection 

		const result = await db.query(sql, sqlValues);
		if (result.code) 
			throw new Error(result.code);
		const {{object.name | camelCase }}List = [];
		for (let {{object.name | camelCase }}Record of result) 
			{{object.name | camelCase }}List.push( objectUtils.convertObjectFromDb({{object.name|camelCase}}ObjectDef, {{object.name|camelCase}}Record, /*filter=*/true) )
		return {{object.name | camelCase }}List;
	}

	{% if idProperty != null -%}
	static async get{{object.name | pascalCase }}By{{idProperty | pascalCase}}({{idProperty | camelCase}}{{object.name | pascalCase }}) {
		assert(this.#model !== null);
		const db = this.#model.db;
		if ({{idProperty | camelCase}}{{object.name | pascalCase }} === undefined)
			throw new Error('Argument <{{idProperty | camelCase}}{{object.name | pascalCase }}> required');
		if (isNaN({{idProperty | camelCase}}{{object.name | pascalCase }}) === undefined)
			throw new Error('Argument <{{idProperty | camelCase}}{{object.name | pascalCase }}> is not a number');
		let sql = `SELECT * FROM {{object.attributes.table_name}} WHERE {{idProperty | camelCase}} = ?`;
		const result = await db.query(sql, [{{idProperty | camelCase}}{{object.name | pascalCase }}]);
		if (result.code) 
			throw new Error(result.code);
		if (result.length === 0) 
			return null;
		const {{object.name | camelCase}} = objectUtils.convertObjectFromDb({{object.name|camelCase}}ObjectDef, result[0], /*filter=*/false)
		return {{object.name | camelCase}};
	}
	{%- endif %}

	static async create{{object.name | pascalCase }}({{object.name | camelCase }}) {
		assert(this.#model !== null);
		const db = this.#model.db;

		const error = {{object.name|camelCase}}ObjectHelper.controlObject{{object.name|pascalCase}}({{object.name | camelCase }}, /*fullCheck=*/true, /*checkId=*/false)
		if ( error)
			throw new Error(error)

		const {{object.name|camelCase}}Db = {{object.name|camelCase}}ObjectHelper.convert{{object.name|pascalCase}}ToDb({{object.name|camelCase}})

		const fieldNames = []
		const markArray = []
		const sqlParams = []
		for (let [propName, propValue] of Object.entries({{object.name|camelCase}}Db)) {
			if (propValue === undefined)
				continue
			fieldNames.push(propName)
			sqlParams.push(propValue)
			markArray.push('?')
		}

		const sqlRequest = `
			INSERT INTO {{object.attributes.table_name}}(${fieldNames.join(', ')}) 
			       VALUES (${markArray.join(', ')});
		`;
		
		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		const {{object.name|camelCase}}Id = result.insertId;
		{{object.name|camelCase }} = this.get{{object.name|pascalCase}}ById({{object.name|camelCase}}Id)
		return {{object.name|camelCase}};
	}

	static async edit{{object.name|pascalCase}}({{object.name|camelCase }}) {
		assert(this.#model !== null)
		const db = this.#model.db

		const error = {{object.name|camelCase}}ObjectHelper.controlObject{{object.name|pascalCase}}({{object.name | camelCase }}, /*fullCheck=*/false, /*checkId=*/true)
		if ( error)
			throw new Error(error)

{%- if  hasSecret %}
		await this.encryptPasswordIfPresent(user)
{%- endif %}

		const {{object.name|camelCase}}Db = {{object.name|camelCase}}ObjectHelper.convert{{object.name|pascalCase}}ToDb({{object.name|camelCase}})
		const fieldNames = []
		const sqlParams = []
		for (let [propName, propValue] of Object.entries({{object.name|camelCase}}Db)) {
			if (propValue === undefined)
				continue
			fieldNames.push(`${propName} = ?`)
			sqlParams.push(propValue)
		}

		const sqlRequest = `
			UPDATE {{object.attributes.table_name}}
				SET ${fieldNames.join(', ')}
			WHERE id = ?
		`
		sqlParams.push({{object.name|camelCase}}.id) // WHERE clause

		const result = await db.query(sqlRequest, sqlParams);
		if (result.code)
			throw new Error(result.code);
		const {{object.name|camelCase}}Id = {{object.name|camelCase}}.id
		{{object.name|camelCase }} = this.get{{object.name|pascalCase}}ById({{object.name|camelCase}}Id)
		return {{object.name|camelCase}};
	}

	{% if idProperty != null -%}
	static async deleteById({{object.name|camelCase}}{{idProperty|pascalCase}}, recursive = false) {
		assert(this.#model !== null);
		const db = this.#model.db;
		if ({{object.name|camelCase}}{{idProperty|pascalCase}} === undefined)
			throw new Error('Argument <{{object.name|camelCase}}{{idProperty|pascalCase}}> required');
		if (isNaN({{object.name|camelCase}}{{idProperty|pascalCase}}) === undefined)
			throw new Error('Argument <{{object.name|camelCase}}{{idProperty|pascalCase}}> is not a number');

		if (! recursive) {
		       	if (await this.hasChildren({{object.name | camelCase}}Id))
				throw new Error(`Can not delete {{object.name}} ID <${ {{object.name | camelCase}}Id }> because it has children`);
		}
		// children will be removed since Database constraint has "ON DELETE CASCADE" 
		let sql = `DELETE FROM {{object.attributes.table_name}} WHERE {{idProperty | camelCase}} = ?`;
		const result = await db.query(sql, [{{object.name|camelCase}}{{idProperty|pascalCase}}]);
		if (result.code) 
			throw new Error(result.code);
		return (result.affectedRows !== 0) 
	}
	{%- endif %}

	{%- for link in object.reverseLinks %}
	static async get{{link.source.name|pascalCase}}Count({{object.name|camelCase}}{{idProperty|pascalCase}}) {
		assert(this.#model !== null);
		const db = this.#model.db;
		const sql = `
			SELECT COUNT(id) as count
			FROM {{link.source.attributes.table_name}}
			WHERE id_{{link.name}} = ?
			`
		const result = await db.query(sql, [{{object.name|camelCase}}Id])
		if (result.code) 
			throw new Error(result.code)
		return result[0].count 
	}
	{% endfor %}

	static async hasChildren({{object.name|camelCase}}{{idProperty|pascalCase}}) {
		{%- for link in object.reverseLinks %}
		if (await this.get{{link.source.name|pascalCase}}Count({{object.name|camelCase}}{{idProperty|pascalCase}}) > 0) 
			return true
		{%- endfor %}
		return false
	}

{%- for property in object.properties %}
{%- if property.secret == true %}

	static async check{{property.name|pascalCase}}({{object.name|camelCase}}, {{property.name|camelCase}}) {
		assert ({{object.name|camelCase}} !== undefined)
		assert ({{object.name|camelCase}}.{{property.name|camelCase}} !== undefined)
		assert ({{property.name|camelCase}} !== undefined)
		const isValid = await bcrypt.compare({{property.name|camelCase}}, {{object.name|camelCase}}.{{property.name|camelCase}});
		return isValid
	}

	static async encrypt{{property.name|pascalCase}}IfPresent({{object.name|camelCase}}) {
		assert ({{object.name|camelCase}} !== undefined)
		if ({{object.name|camelCase}}.{{property.name|camelCase}} === undefined)
			return
		assert(this.#config.security.hashSalt !== undefined);
		const saltRounds = this.#config.security.hashSalt;
		{{object.name|camelCase}}.{{property.name|camelCase}} = await bcrypt.hash({{object.name|camelCase}}.{{property.name|camelCase}}, saltRounds)
	}
{%- endif %}
{%- endfor  %}
}

module.exports = ({%- if  hasSecret -%}config{%- endif - %}) => {
	{{object.name | pascalCase}}Model.initialize({%- if  hasSecret -%}config{%- endif - %});
	return {{object.name | pascalCase }}Model;
}

