'use strict'
var expect = require('chai').expect;
let chai = require('chai');
let chaiHttp = require('chai-http');

const assert = require('assert')
const util = require('./helpers/util.js')
const account = require('./helpers/account.js')

let userEmail = null

const ROUTE_REGISTER = 'api/v1/auth/register'
const ROUTE_VALIDATE = 'api/v1/auth/validateRegistration'

describe('Test user registration', () => {

	before( async () =>  {
		util.loadConfig()
		await util.connectDb()
		userEmail = util.getEmail1()
		await account.accountPurge(userEmail)
		//const user = await account.findUserByEmail(userEmail)
		await util.sleep(1000)
	}),
	before( async () =>  {
		await util.disconnectDb()
	}),

	describe('Test root', () => {
		describe (`Control /${ROUTE_REGISTER} route`, () => {
			it(`Should detect missing email in request body`, async () => {
				let json = await util.requestJsonPost(ROUTE_REGISTER, {
						email_missing:'',
						password:'',
						firstname:'',
						lastname:''
					})
				expect(json).to.have.property('ok')
				expect(json.ok).to.be.a('boolean')
					.and.to.be.equal(false)
				expect(json).to.have.property('error')
				expect(json.error).to.be.a('string')
					.and.to.be.equal(`Can't find <email> in request body`)
			}),
			// TODO test missing password
			// TODO test missing firstname
			// TODO test missing lastname
			it(`Should create account`, async () => {
				assert(userEmail !== null)
				let json = await util.requestJsonPost(ROUTE_REGISTER, {
						email: userEmail,
						password:'abCD-EF-1023',
						firstname:'John',
						lastname:'Do'
					})
				expect(json).to.have.property('ok')
				expect(json.ok).to.be.a('boolean')
					.and.to.be.equal(true)
				expect(json).to.have.property('data')

				expect(json.data).to.have.property('userId')
				expect(json.data.userId).to.be.a('number')

				expect(json.data).to.have.property('companyId')
				expect(json.data.companyId).to.be.null
				expect(json.data).to.have.property('access-token')
				expect(json.data).to.have.property('refresh-token')
			})

		}),
		describe (`Control /${ROUTE_VALIDATE} route`, () => {
			it(`Should accept validtion code`, async () => {
				assert(userEmail !== null)
				const user = await account.findUserByEmail(userEmail)
				expect(user).not.to.be.null
				expect(user).to.have.property('id')
				expect(user).to.have.property('validation_code')
				expect(user.validation_code).to.be.a('number')
				let json = await util.requestJsonPost(ROUTE_VALIDATE, {
						'validationCode': user.validation_code,
					})
				expect(json).to.have.property('ok')
				expect(json.ok).to.be.a('boolean')
					.and.to.be.equal(true)
			})
		})
	})

})
