const backendUrl = 'http://localhost:9001'

var expect = require('chai').expect;
let chai = require('chai');
let chaiHttp = require('chai-http');

const requestJsonGet = async (url) => {
	let response = await fetch(url);
	if (response.status != 200)
		throw new Error(`Server status not 200 but ${response.status} (${response.statusText})`);
	let json = await response.json();
	if (json.ok === undefined)
		throw new Error(`Can't find "ok" in server's response`)
	return json
}

describe('Test API root', () => {

	describe('Test root', () => {
		it('Control / route', async () => {
			let url=`${backendUrl}/`
			let json = await requestJsonGet(url)
			expect(json).to.have.property('ok')
			expect(json.ok).to.be.a('boolean')
				.and.to.be.equal(true)
			expect(json).to.have.property('data')
			expect(json.data).to.be.a('string')
				.and.to.be.equal(`API comaint frontend ready`)
		}),
		it('Control /version route', async () => {
			let url=`${backendUrl}/version`
			let json = await requestJsonGet(url)
			expect(json).to.have.property('ok')
			expect(json.ok).to.be.a('boolean')
				.and.to.be.equal(true)
			expect(json).to.have.property('data')
			expect(json.data).to.be.a('string')
				.and.match(/^\d+\.\d+\.\d+$/)
		})
		it('Control /api/version route', async () => {
			let url=`${backendUrl}/api/version`
			let json = await requestJsonGet(url)
			expect(json).to.have.property('ok')
			expect(json.ok).to.be.a('boolean')
				.and.to.be.equal(true)
			expect(json).to.have.property('data')
			expect(json.data).to.be.a('string')
				.and.match(/^v\d$/)
		})


	})

})
