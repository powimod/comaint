{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'controller.js'
		%}
'use strict';

const util = require('../util.js');


class Controller {
	#app = null; // Express application
	#config = null;
	#model;
	#view; 

	#authRoutes = null;
	{% for object in project.objects -%}
	#{{object.name | pascalCase }}Routes = null;
	{% endfor %}

	initialize(config, model, view) {
		if (! config instanceof Object)
			throw new Error('Invalid config argument');
		if (! model instanceof Object || model.constructor.name !== 'Model')
			throw new Error('Invalid model argument');
		if (! view instanceof Object || view.constructor.name !== 'View')
			throw new Error('Invalid view argument');

		this.#config = config;
		this.#model = model;
		this.#view = view; 

		const express = require('express');
		this.#app = express();
		this.#app.use(express.json())
		this.#app.use(express.urlencoded({extended: true}));

		const cors = require('cors')
		this.#app.use(cors());

		// TODO add session

		this.#app.get('/', (request, response) => {
			this.#view.sendJsonResult(response, 'API {{project.name}} frontend ready');
		});

		this.#app.get('/version', (request, response) => {
			this.#view.sendJsonResult(response, '{{project.name backend}} V{{project.attributes.backend_project_version}}');
		});

		this.#app.get('/api/{{project.attributes.api_version}}', (request, response) => {
			this.#view.sendJsonResult(response, '{{project.name}} backend API {{project.attributes.api_version}} ready');
		});

		this.#app.post('/sendMail', async (request, response) => {
			try {
				const email = request.body.email;
				if (email === undefined)
					throw new Error(`Can't find <email> in request body`);
				const subject = request.body.subject;
				if (subject === undefined)
					throw new Error(`Can't find <subject> in request body`);
				const textBody = request.body.text;
				if (textBody === undefined)
					throw new Error(`Can't find <text> in request body`);
				const htmlBody = `<p>${textBody}</p>`;
				const result = await util.sendMail(
					email,
					subject,
					textBody,
					htmlBody,
					this.#config.mail
				); 
				this.#view.sendJsonResult(response, result);
			}
			catch (error) {
				const errorMessage = (error.message !== undefined) ? error.message : error;
				console.error(errorMessage);
				response.json({ ok : false, error: errorMessage });
			}
		});

		this.#authRoutes = require('./auth-routes.js');
		this.#authRoutes.initialize(this.#app, this.#model.getAuthModel(), this.#view, config);
		{% for object in project.objects %}
		this.#{{object.name | pascalCase }}Routes = require('./{{object.name | kebabCase }}-routes.js')(this.#app, this.#model.get{{object.name | pascalCase }}Model(), this.#view);
		{%- endfor %}
	}

	get config() {
		return this.#config;
	}

	{% for object in project.objects %}
	get{{object.name | pascalCase }}Routes() {
		return this.#{{object.name | pascalCase }}Routes;
	}
	{% endfor %}

	async run () {
		if (this.#app === null)
			throw new Error('Controller not initialized');
		this.#app.listen(this.#config.server.port, 
			() => { // success
				console.log(`Listening on port ${this.#config.server.port}`);
			}
		);
	}
}

class ControllerSingleton {
	constructor() {
		throw new Error('Can not instanciate singleton object!');
	}
	static getInstance() {
		if (! ControllerSingleton.instance)
			ControllerSingleton.instance = new Controller();
		return ControllerSingleton.instance;
	}
}

module.exports = ControllerSingleton;
