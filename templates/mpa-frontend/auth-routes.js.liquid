{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.mpa_frontend_project_name,
  		description : project.attributes.mpa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-routes.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
%}
'use strict';
const assert = require('assert');
const authApi = require('../api/auth-api.js');

module.exports = (app) => {
        const ViewSingleton = require('../views/view.js');
        const view = ViewSingleton.getInstance();
        const ControllerSingleton = require('./controller.js');
        const controller = ControllerSingleton.getInstance();

	// middleware to initialize session
	app.use( (request, response, next) => {
		if (! request.session.{{authObject.name|camelCase}}Id) {
			request.session.{{authObject.name|camelCase}}Id = null;
			request.session.accessToken= null;
			request.session.refreshToken= null;
		}
		next();
	});

	app.get('/login', (request, response) => {
		view.renderPage('auth-login',  response, {});
	});
	app.post('/login', async (request, response) => {
		// TODO add try/catch bloc
		const email = request.body.email;
		const password = request.body.password;
		const result = await authApi.login(email, password);
		if (! result.ok) {
			view.renderPage('auth-login',  response, {error: result.error});
			return;
		}
		request.session.{{authObject.name|camelCase}}Id = result.{{authObject.name|camelCase}}Id;
		request.session.accessToken = result.accessToken;
		request.session.refreshToken = result.refreshToken;
		response.redirect('/');
	});


	app.get('/logout', (request, response) => {
		view.renderPage('auth-logout',  response, {});
	});

	app.post('/logout', async (request, response) => {
		// TODO add try/catch bloc
		if (request.session.{{authObject.name|camelCase}}Id === null) {
			response.redirect('/'); // {{authObject.name|pascalCase}} is not logged in
			return;
		}
		assert(request.session.refreshToken !== null);
		const result = await authApi.logout(request.session.refreshToken);
		if (! result.ok) {
			view.renderPage('auth-logout',  response, {error: result.error});
			return;
		}
		request.session.destroy( (err) => { // a new cookie will be recreated
			response.redirect('/'); 
		});
	});

	app.get('/register', (request, response) => {
		view.renderPage('auth-register',  response, {});
	});
	app.post('/register', async (request, response) => {
		try {
			throw new Error("Register not implemented");
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			view.renderPage('error',  response, { message: errorMessage });
		}
	});
}


