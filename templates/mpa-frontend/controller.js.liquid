{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.mpa_frontend_project_name,
  		description : project.attributes.mpa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'controller.js'
		%}
'use strict';
const assert = require('assert');

class Controller {
	#config;
	#model;
	#view; 
	#app = null; // Express application

	{% for object in project.objects -%}
	_{{object.name | pascalCase }}Routes = null;
	{% endfor %}

	initialize(config, model, view) {
		if (! config instanceof Object)
			throw new Error('Invalid config argument');
		if (! model instanceof Object || model.constructor.name !== 'Model')
			throw new Error('Invalid model argument');
		if (! view instanceof Object || view.constructor.name !== 'View')
			throw new Error('Invalid view argument');

		this.#config = config;
		this.#model = model;
		this.#view = view; 

		var path = require('path');
		const express = require('express');
		this.#app = express();
		this.#app.set('view engine', 'ejs');
		this.#app.set('views', path.join(__dirname, '..', 'views'));
		this.#app.use(express.static(path.join(__dirname, '..', '..', 'public')));
		this.#app.use(express.urlencoded({extended: true}));

		assert (this.#config.session.secret != undefined);
		assert (this.#config.session.maxAge != undefined);
		const session = require('express-session');
		this.#app.use(session({
			secret: this.#config.session.secret, 
			resave: false,
			saveUninitialized: true,
			cookie : {
				maxAge: this.#config.session.maxAge // cookie lifetime in ms
			}
		}));
		// middleware to initialize session
		this.#app.use( (request, response, next) => {
			if (! request.session.userId) {
				request.session.userId = null;
			}
			next();
		});

		
		this.#app.get('/', (request, response) => {
			if (request.session.userId === null) {
				this.#view.renderPage('public-home',  response, {});
			}
			else {
				this.#view.renderPage('private-home',  response, {});
			}
		});



		this.#app.get('/', (request, response) => {
			this.#view.renderPage('home',  response, {});
		});

		{% for object in project.objects %}
		this._{{object.name | pascalCase }}Routes = require('./{{object.name | kebabCase }}-routes.js')(this.#app);
		{%- endfor %}

		this.#app.get('*', (request, response) => {
			// FIXME this function is executed even if a route has been used
			// how to prevent to call error page rendering ?
			this.#view.renderPage('error',  response, {message: 'Invalid route'});
		});
	}

	get config() {
		return this.#config;
	}

	{% for object in project.objects %}
	get{{object.name | pascalCase }}Routes() {
		return this._{{object.name | pascalCase }}Routes;
	}
	{% endfor %}

	async run () {
		if (this.#app === null)
			throw new Error('Controller not initialized');
		this.#app.listen(this.#config.server.port, 
			() => { // success
				console.log(`Listening on port ${this.#config.server.port}`);
			}
		);
	}
}

class ControllerSingleton {
	constructor() {
		throw new Error('Can not instanciate singleton object!');
	}
	static getInstance() {
		if (! ControllerSingleton.instance)
			ControllerSingleton.instance = new Controller();
		return ControllerSingleton.instance;
	}
}

module.exports = ControllerSingleton;

