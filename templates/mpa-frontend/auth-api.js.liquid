{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.mpa_frontend_project_name,
  		description : project.attributes.mpa_frontend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : 'auth-api.js'
		%}
{% liquid 
	assign authObject = project.objects | where: 'name',  project.attributes.auth_object | first
	assign authIdentProp = authObject.properties | where: 'name', project.attributes.auth_ident_property | first
	assign authPasswordProp = authObject.properties | where: 'name', project.attributes.auth_password_property | first
	assign authCodeProp = authObject.properties | where: 'name', project.attributes.auth_code_property | first
%}
'use script';
const assert = require('assert');
const ApiToolSingleton = require('./api-tools.js');
const apiTool = ApiToolSingleton.getInstance();
const ModelSingleton = require('./model.js');
const model  = ModelSingleton.getInstance();


exports.login = async function({{authIdentProp.name|camelCase}}, {{authPasswordProp.name|camelCase}}, params) {
	assert({{authIdentProp.name|camelCase}} !== undefined);
	assert({{authPasswordProp.name|camelCase}} !== undefined);
	const url = 'auth/login';
	try {
		// TODO control {{authIdentProp.name|camelCase}} and {{authPasswordProp.name|camelCase}} values are not empty

		const requestBody = {
			{{authIdentProp.name|camelCase}}: {{authIdentProp.name|camelCase}}, 
			{{authPasswordProp.name|camelCase}}: {{authPasswordProp.name|camelCase}}
		};
		const result = await apiTool.request(url, 'POST',  requestBody, null);
		const {{authObject.name|camelCase}}Id = result['{{authObject.name|camelCase}}Id'];;
		if ({{authObject.name|camelCase}}Id === undefined)
			throw new Error('{{authObject.name|camelCase}}Id not found in HTTP response');
		const refreshToken = result['refresh-token'];;
		if (refreshToken === undefined)
			throw new Error('refresh-token not found in HTTP response');
		const accessToken = result['access-token'];;
		if (accessToken === undefined)
			throw new Error('access-token not found in HTTP response');
		return {
			ok: true, 
			{{authObject.name|camelCase}}Id: {{authObject.name|camelCase}}Id, 
			refreshToken: refreshToken, accessToken: accessToken
		};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

exports.logout = async function(refreshToken, params) {
	assert(refreshToken !== undefined);
	const url = '/auth/logout';
	try {
		const requestBody = {
			refreshToken: refreshToken
		};
		const result = await apiTool.request(url, 'POST',  requestBody, null);

		return {ok: true};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

exports.register = async function({{authIdentProp.name|camelCase}}, {{authPasswordProp.name|camelCase}}, params) {
	assert({{authIdentProp.name|camelCase}} !== undefined);
	assert ({{authPasswordProp.name|camelCase}} !== undefined);
	const url = 'auth/register';
	try {
		// TODO control {{authIdentProp.name|camelCase}} and {{authPasswordProp.name|camelCase}} values are not empty
		const requestBody = { 
			{{authIdentProp.name|camelCase}}: {{authIdentProp.name|camelCase}}, 
			{{authPasswordProp.name|camelCase}}: {{authPasswordProp.name|camelCase}}
		};
		const result = await apiTool.request(url, 'POST',  requestBody, null);
		const {{authObject.name|camelCase}}Id = result['{{authObject.name|camelCase}}Id'];;
		if ({{authObject.name|camelCase}}Id === undefined)
			throw new Error('{{authObject.name|camelCase}}Id not found in HTTP response');
		const refreshToken = result['refresh-token'];;
		if (refreshToken === undefined)
			throw new Error('refresh-token not found in HTTP response');
		const accessToken = result['access-token'];;
		if (accessToken === undefined)
			throw new Error('access-token not found in HTTP response');
		return {
			ok: true, 
			{{authObject.name|camelCase}}Id: {{authObject.name|camelCase}}Id, 
			refreshToken: refreshToken,
			accessToken: accessToken
		};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}

exports.validateRegistration = async function({{authCodeProp.name|camelCase}}, params) {
	assert({{authCodeProp.name|camelCase}} !== undefined);
	assert(params !== undefined);
	assert(params.accessToken !== null);
	const url = '/auth/validateRegistration';
	try {
		// TODO control {{authCodeProp.name|camelCase}} value is not empty

		const requestBody = {
			{{authCodeProp.name|camelCase}}: {{authCodeProp.name|camelCase}}
		};
		const result = await apiTool.request(url, 'POST',  requestBody, null);
		return {ok: true};
	}
	catch (error) {
		return {
			ok: false, 
			error: (error.message !== undefined) ? error.message : error
		};
	}
}


