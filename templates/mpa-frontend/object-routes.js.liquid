{%- assign filename = object.name | kebabCase | append: "-routes.js" -%}
{% render "../../templates/license_header_js.liquid",
		project     : project.attributes.backend_project_name,
  		description : project.attributes.backend_project_description,
		authors     : project.attributes.authors,
		copyright   : project.attributes.copyright,
		filename    : filename 
		%}
'use script';
const assert = require('assert');
const {{object.name | camelCase}}Api = require('../api/{{object.name | kebabCase}}-api.js');

module.exports = (app) => {
        const ViewSingleton = require('../views/view.js');
        const view = ViewSingleton.getInstance();
        const ControllerSingleton = require('./controller.js');
        const controller = ControllerSingleton.getInstance();

	app.get('/{{object.name | kebabCase}}/list', async (request, response) => {
		try {
			const filters = {};
			{%- for link in object.links %}
			{% assign paramName = link.target.name | camelCase | append: 'Id' -%}
			let {{paramName}} = request.query.{{paramName}};
			if ( {{paramName}} !== undefined) {
				if (isNaN({{paramName}}))
					throw new Error('Query <{{paramName}}> is not a number');
				filters.{{paramName}} = parseInt({{paramName}});
			}
			{%- endfor %}
			const resultsPerPage = controller.config.parameters.resultsPerPage;
			assert(resultsPerPage !== undefined);
			const params = {
				resultsPerPage : resultsPerPage,
				accessToken: request.session.accessToken
			};
			const result = await {{object.name | camelCase}}Api.get{{object.name | pascalCase}}List(filters, params);
			if (! result.ok)
				throw new Error(`API error : ${result.error}`);
			view.renderPage('{{object.name | kebabCase}}-list',  response, {
				{{object.name | camelCase}}List: result.{{object.name | camelCase}}List
			});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			view.renderPage('error',  response, { message: errorMessage });
		}
	});

	app.get('/{{object.name | kebabCase}}/:{{object.name | snakeCase}}_id', async (request, response) => {
		try {
			const {{object.name | camelCase}}Id = request.params['{{object.name | snakeCase}}_id'];
			if (isNaN({{object.name | camelCase}}Id))
				throw new Error(`URL parameter <{{object.name | camelCase}}_id>=${ {{object.name | camelCase}}Id } is not a number`);
			const result = await {{object.name | camelCase}}Api.get{{object.name | pascalCase}}Details({{object.name | camelCase}}Id, {
				accessToken: request.session.accessToken
			});
			if (! result.ok)
				throw new Error(`API error : ${result.error}`);
			view.renderPage('{{object.name | kebabCase}}-details',  response, {
				{{object.name | camelCase}}: result.{{object.name | camelCase}}
			});
		}
		catch (error) {
			const errorMessage = (error.message !== undefined) ? error.message : error;
			view.renderPage('error',  response, { message: errorMessage });
		}
	});

	// FIXME route not used 
	{% for link in object.reverseLinks -%}
	app.get('/{{object.name | kebabCase}}/:{{object.name | snakeCase}}_id/{{link.source.name | kebabCase}}-list', async (request, response) => {
		view.renderPage('error',  response, { message: "not implemented" });
	});
	{%- endfor %}

}

